str(infoData)
View(vcf2)
View(vcf_data_33)
View(vcf_data_33)
setwd("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2")
setwd("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R")
library(mobster)
library(tidyr)
library(dplyr)
VariantAnnotation::expand(...)
S4Vectors::expand(...)
VariantAnnotation::expand()
S4Vectors::expand(...)
library(tidyr)
library(dplyr)
load_vcf('../vignettes/strelka-example.vcf')
load_vcf('../vignettes/strelka-example.vcf')
data()
load_vcf('../vignettes/strelka-example.vcf')
load_vcf('../vignettes/strelka-example.vcf')
data()
load_vcf('../vignettes/strelka-example.vcf')
clss
cls
dir()
load_vcf('../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_DP2')
rlang::last_trace()
mobster::load_vcf('../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_DP2')
mobster::load_vcf('../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'NV')
mobster::load_vcf('../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_DP2')
mobster::load_vcf(file, DP_column = "DP", NV_column = "NV")
file <- '../vignettes/strelka-example.vcf'
mobster::load_vcf(file, DP_column = "DP", NV_column = "NV")
vcfR::read.vcfR('../vignettes/strelka-example.vcf')
vcf_data <- read.vcfR('vignettes/strelka-example.vcf')
vcf_data <- read.vcfR('../vignettes/strelka-example.vcf')
View(vcf_data)
View(vcf_data)
View(vcf_data)
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
rlang::last_trace()
rlang::last_trace(drop = FALSE)
View(vcf_data)
@doctype data
mobster@doctype data
View(vcf_data)
View(vcf_data)
data(vcf_data, package = "mobster")
load(vcf_data)
data()
x = random_dataset(seed = 123, Beta_variance_scaling = 100, N = 200)
print(x)
View(x)
mobster::load_vcf(file, DP_column = "DP", NV_column = "NV")
mobster::load_vcf(file, DP_column = "DP")
mobster::load_vcf(file, DP_column = "gt_DP")
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
cls
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
rlang::last_trace()
View(vcf_data)
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
setwd("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R")
library(mobster)
library(tidyr)
library(dplyr)
library(tidyr)
library(dplyr)
vcf_data2 <- load_vcf('../vignettes/strelka-example.vcf')
vcf_data3 = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
vcf_data3 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
load("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/data/LU4_lung_sample.rda")
View(LU4_lung_sample)
View(LU4_lung_sample)
View(LU4_lung_sample)
View(LU4_lung_sample)
View(LU4_lung_sample)
View(LU4_lung_sample)
print(mobster::LU4_lung_sample$best$data)
View(LU4_lung_sample)
View(vcf_data)
View(vcf_data)
print(dataset$data)
vcf_data4 = random_dataset(seed = 1234, Beta_variance_scaling = 100)
View(vcf_data4)
vcf_data4$data
vcf_data4_data <- vcf_data4$data
View(vcf_data4_data)
write.csv(vcf_data4_data, "vcf_data4_data.csv", row.names = FALSE)
mobster::load_vcf('vcf_data_frame.csv', DP_column = "DP", NV_column = "NV")
vcf_data5 <- mobster::load_vcf('vcf_data_frame.csv', DP_column = "DP", NV_column = "NV")
Clusters(fit$best)
vcf_data5 <- mobster::load_vcf('R-GRCh38.variant_call.all.2.vcf.gz.VCF', DP_column = "DP", NV_column = "NV")
library(vcfR)
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_GT_alleles')
vcf_data = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_DP2')
vcf_data = load_vcf(file = file)
vcf_data6 = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_DP2')
getwd()
vcf_data6 = load_vcf(file = file, DP_column = 'gt_DP', NV_column = 'gt_DP2')
demo()
demo()
image
setwd("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R")
getwd()
dir()
vcf_data <- read.vcfR('../vignettes/strelka-example.vcf')
library(mobster)
library(tidyr)
library(dplyr)
library(vcfR)
vcf_data <- read.vcfR('../vignettes/strelka-example.vcf')
View(vcf_data)
vcf_data@gt
vcf_data7 <- load_vcf('../vignettes/strelka-example.vcf')
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
View(load_vcf)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
rlang::last_trace()
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
force(frame)
View(frame)
View(frame)
View(load_vcf)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
on.exit(base::browser(..., skipCalls = skipCalls + 1))
rlang::last_trace()
force(frame)
View(frame)
View(frame)
View(frame)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'DP', NV_column = 'TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf')
all_data$gt_DP
all_data$gt_TIR
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
View(vcf_data8)
write.csv(vcf_data8, "vcf_data8.csv", col.names = FALSE)
write.csv(vcf_data8, "vcf_data8.csv", row.names = FALSE)
View(vcf_data8)
vcf_data8$VAF
vcf_data8$DP
vcf_data8$TIR
mobster:::template_parameters_fast_setup()
View(load_vcf)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf', DP_column = 'gt_DP', NV_column = 'gt_TIR')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf')
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_2/R/load_VCF.R")
vcf_data8 = load_vcf(file = '../vignettes/strelka-example.vcf')
setwd("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
library(mobster)
library(dplyr)
library(tidyr)
library(vcfR)
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R", echo=TRUE)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data <- load_vcf(file = file)
load("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/data/fit_example.rda")
View(fit_example)
View(fit_example)
View(vcf_data)
load("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/data/LU4_lung_sample.rda")
View(LU4_lung_sample)
View(vcf_data)
View(vcf_data)
View(vcf_data)
View(vcf_data)
View(vcf_data)
View(vcf_data)
View(LU4_lung_sample)
View(vcf_data)
View(fit_example)
View(vcf_data)
mobster::load_vcf(vcf_data)
View(LU4_lung_sample)
View(vcf_data)
save(vcf_data, file="vcf_data_01.rda")
load("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/vcf_data_01.rda")
load("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/vcf_data_01.rda")
View(vcf_data)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_me.R")
View(data)
View(data)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_me.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_me.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_me.R")
View(data)
View(vcf_data)
View(vcf_data)
View(vcf_data)
View(data)
View(data)
??mobsterr
vcf_data(fit_example)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
#' x = random_dataset(seed = 123, Beta_variance_scaling = 100, N = 200)
#' print(x) # Contains a ggplot object
#'
#' # Fit, default models, changed epsilon for convergence
#' x = mobster_fit(x$data, epsilon = 1e-5)
#'
#' plot(x$best)
#' print(x$best)
#'
#' lapply(x$runs[1:3], plot)
mobster_fit = function(x,
K = 1:3,
samples = 5,
init = 'peaks',
tail = c(TRUE, FALSE),
epsilon = 1e-10,
maxIter = 250,
fit.type = 'MM',
seed = 12345,
model.selection = 'reICL',
trace = FALSE,
parallel = TRUE,
pi_cutoff = 0.02,
N_cutoff = 10,
auto_setup = NULL,
silent = FALSE,
description = "My MOBSTER model")
{
pio::pioHdr(paste0("MOBSTER fit"))
cat('\n')
# Check for basic input requirements
mobster:::check_input(x,
K,
samples,
init,
tail,
epsilon,
maxIter,
fit.type,
seed,
model.selection,
trace)
X = tibble::as_tibble(x)
mobster:::m_ok("Loaded input data, n = {.value {nrow(x)}}.") %>% cli::cli_text()
###################### Auto setup of parameters
if (!is.null(auto_setup))
{
# Get the parameters, checks they are known, throws errors.
template = mobster:::auto_setup(auto_setup)
K = template$K
samples = template$samples
init = template$init
tail = template$tail
epsilon = template$epsilon
maxIter = template$maxIter
fit.type = template$fit.type
seed = template$seed
model.selection = template$model.selection
trace = template$trace
parallel = template$parallel
pi_cutoff = template$pi_cutoff
N_cutoff = template$N_cutoff
}
###################### Initializations
set.seed(seed)
TIME = as.POSIXct(Sys.time(), format = "%H:%M:%S")
# Storage variables
best = obj = runs = NULL
# Configurations that will be used for model selection
tests = expand.grid(
K = K,
tail = tail,
Run = 1:samples,
stringsAsFactors = FALSE
)
ntests = nrow(tests)
###################### Print message
mobster:::m_txt(
"n = {.value {nrow(x)}}. Mixture with k = {.field {paste(K, collapse = ',')}} Beta(s). Pareto tail: {.field {tail}}. Output clusters with \u03c0 > {.value {pi_cutoff}} and n > {.value {N_cutoff}}."
) %>% cli::cli_text()
if (!is.null(auto_setup))
mobster:::m_wrn("mobster automatic setup {.field {auto_setup}} for the analysis.") %>% cli::cli_text()
else
mobster:::m_txt(
'Custom fit by {.field {ifelse(fit.type == \'MM\', "Moments-matching", "Maximum-Likelihood")}} in up to {.value {maxIter}} steps, with \u03B5 = {.value {epsilon}} and {.field {init}} initialisation.'
) %>% cli::cli_text()
mobster:::m_txt(
'Scoring ({.value {ifelse(parallel, green("with parallel"), red("without parallel"))}}) {.value {samples}} x {.value {length(K)}} x {.value {length(tail)}} = {.field {ntests}} models by {.field {model.selection}}.'
) %>% cli::cli_text()
cat('\n')
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Fits are obtained using the easypar package
# which allows easy parallelization of R functions
#
# https://github.com/caravagn/easypar
#
# Inputs in the easypar format - list of lists
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
inputs = lapply(1:nrow(tests),
function(r)
list(
X = x,
K = tests[r, 'K'],
init = init,
tail = tests[r, 'tail'],
epsilon = epsilon,
maxIter = maxIter,
fit.type = fit.type,
trace = trace,
pi_cutoff = pi_cutoff,
N_cutoff = N_cutoff,
description = description
))
runs = easypar::run(
FUN = mobster:::.dbpmm.EM,
PARAMS = inputs,
packages = c("dplyr", 'tidyr', "mobster"), # Required for pipes and other functions
export = ls(globalenv(), all.names = TRUE),
cores.ratio = .8,
parallel = parallel,
cache = NULL,
filter_errors = TRUE # Error managment is inside easypar
)
# Should not happen
if (length(runs) == 0)
stop("All task returned errors, no fit available, raising this error to interrupt the computation....")
# What is successfull (id of the task)
succesfull_tasks = names(runs) %>% as.numeric()
tests = tests[succesfull_tasks, , drop = FALSE]
# Report timing to screen
TIME = difftime(as.POSIXct(Sys.time(), format = "%H:%M:%S"), TIME, units = "mins")
cat('\n\n')
mobster:::m_inf("{crayon::bold('MOBSTER fits')} completed in {.value {prettyunits::pretty_dt(TIME)}}.") %>% cli::cli_text()
cat('\n')
# Get all scores
scores_succesfull_tasks = lapply(runs, function(w)
w$scores)
tests = bind_cols(tests, Reduce(bind_rows, scores_succesfull_tasks))
# clean up some repeated results -- show unique fits
tests$Run = NULL
scores.columns = colnames(runs[[1]]$scores)
tests[, scores.columns] = apply(tests[, scores.columns], 2, round, digits = 2)
runs = runs[!duplicated(tests)] # remove duplicated entries..
tests = tests[!duplicated(tests),] # remove duplicated entries..
rownames(tests) = NULL
# Model selection -- this will be returned later ..
model = model_selection(runs, scores.suitable = model.selection)
model = model$model.selection[[model.selection]]
model$model.selection = model.selection
###### SHOW BEST FIT
# cli::cli_alert_info(paste(bold("BEST:"), model.selection))
print.dbpmm(model$best)
return(model)
}
View(mobster_fit)
View(data)
View(fit_example)
View(fit_example)
View(fit_example)
View(fit_example)
View(fit_example)
View(fit_example)
LU4_fit = mobster::vcf_data
vcf_data_02 <- load_vcf(file = file)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/load_VCF.R")
vcf_data_02 <- load_vcf(file = file)
vcf_data_03 <- data.frame(vcf_data_02)
View(vcf_data_03)
mobster_fit(vcf_data_03, K = 1:3,
samples = 5,
init = 'peaks',
tail = c(TRUE, FALSE),
epsilon = 1e-10,
maxIter = 250,
fit.type = 'MM',
seed = 12345,
model.selection = 'reICL',
trace = FALSE,
parallel = TRUE,
pi_cutoff = 0.02,
N_cutoff = 10,
auto_setup = NULL,
silent = FALSE,
description = "My MOBSTER model")
mobster:::template_parameters_fast_setup()
mobster_fit(vcf_data_03)
yy <- mobster:::template_parameters_fast_setup()
View(yy)
mobster_fit(vcf_data_03, yy)
mobster_fit(vcf_data_02, yy)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
yy <- mobster:::template_parameters_fast_setup()
mobster_fit(x, yy)
View(vcf_data_03)
View(vcf_data_03)
View(vcf_data_02)
View(vcf_data_02)
class(vcf_data_03)
vcf_data_03$VAF <- vcf_data_03$VAF + 0.000000012
View(vcf_data_03)
yy <- mobster:::template_parameters_fast_setup()
mobster_fit(x, yy)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
View(vcf_data_03)
yy <- mobster:::template_parameters_fast_setup()
mobster_fit(x, yy)
result <- mobster_fit(x = vcf, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
Q

vcf_data_03$VAF <- ifelse(vcf_data_03$VAF > 1, vcf_data_03$VAF / 100, vcf_data_03$VAF)
View(vcf_data_03)
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
yy <- mobster:::template_parameters_fast_setup()
mobster_fit(x, yy)
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
library(cli)
library(sads)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(ctree)

library(easypar)
library(pio)
library(crayon)
library(dbpmm)
library(dbpm)



result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
parallel_text <- ifelse(parallel, "{.green with parallel}", "without parallel")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
library(easypar)
library(pio)
library(crayon)
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/Model_selection.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
library(dbpmm)
library(dbpm)
mobster::ddbpmm()
mobster::ddbpmm(EM)
mobster::plot.dbpmm()
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
source("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/R/mobster_fit.R")
result <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
View(result)
View(result)
View(result)
View(result)
result_mob <- mobster::result
result_mob <- mobster_fit(x = vcf_data_03, K = 1:3, samples = 5, init = 'peaks', tail = c(TRUE, FALSE))
View(result_mob)
fit$runs
result_mob$best
result_mob$runs
result_mob$fits.table
print(result_mob$best)
print(result_mob[[3]])
Clusters(result_mob$best)
Clusters(fit$best, cutoff_assignment = 0.85)
Clusters(result_mob$best, cutoff_assignment = 0.85)
plot(result_mob$best)
cowplot::plot_grid(
vcf_data_03$plot,
plot(result_mob$best),
ncol = 2,
align = 'h')
View(x)
cowplot::plot_grid(x$plot, plot(result_mob$best), ncol = 2, align = 'h')
result_mob$model.selection
result_mob$data
print(x$plot)
savehistory("C:/Users/sisay/Documents/My_Notebook/mobster_NEW_3/hist_my.Rhistory")
