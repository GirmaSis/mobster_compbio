print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.4, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
}
setwd("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto")
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.4, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
}
quartz(height = 16, width = 15)
print(timon[[id]])
setwd("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto")
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.4, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
}
setwd("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto")
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
f
setwd(d)
id = 5
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
cutoffs = names(x)
fit = lapply(cutoffs, sfit)
cutoffs
cutoffs = c('0.1', '0.2')
fit = lapply(cutoffs, sfit)
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
#### Use these to source -- see loader.R
source('../../../src/loader.R')
loader()
setwd("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto")
#### Use these to source -- see loader.R
source('../../../src/loader.R')
loader()
timon <- readRDS("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/simulation_results_theide_blinded.rds")
quartz(height = 16, width = 15)
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/BetaPosteriorCredibilityInterval.R')
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
x=bs
sfit = function(c) {
cat(bgRed('[Fit]'), c, '\n')
y = x[[c]]
yw = y[['WITHIN']]
yh = y[['HIGHER']]
yl = y[['LOWER']]
# Assumption: within is neutral tail
ntotal = sum(sapply(y, nrow))
prop.p = (nrow(yh) + nrow(yw))/ntotal
yh = rbind(yh, yw)
# end: Assumption
cat('\t', bgBlue('[PROPORTIONS]'), cyan('Pareto :'), prop.p, cyan('MBinomial :'), (1-prop.p), '\n')
pareto.fit = pareto.MLE(yh$s_n/yh$t_n)
cat('\t', bgBlue('[PARETO]'), cyan('scale :'), pareto.fit[1], cyan('shape :'), pareto.fit[2], '\n')
mbinomial.fit = vb_bmm1D_fit(
X = yl[, c('s_n', 't_n')],
K = 10,
alpha_0 = 1e-8,
a_0 = 1,
b_0 = 1,
max_iter = NA,
epsilon_conv = 1e-8,
is_verbose = FALSE,
restarts = 3
)
pll = function(x, m, a) {
n = length(x)
logx = sum(log(x))
ll = (n * log(a) + n * log(m) - (a+1) * logx)
}
# ploglik = sum(dpareto(yh$s_n/yh$t_n, scale = pareto.fit[1], shape = pareto.fit[2], log = TRUE))
ploglik = pll(yh$s_n/yh$t_n, pareto.fit[2], pareto.fit[1])
dloglik = - dbmixture(yl, mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K) + log(1-prop.p)
print(dbmixture(yl, mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K))
print(1-prop.p)
K = length(mbinomial.fit$pi_k[mbinomial.fit$pi_k > 0.01])
bic = (K + 1) * log(nrow(yh) + nrow(yl)) / 2
score =  log(prop.p) + ploglik +  log(1-prop.p) + dloglik - bic
cat('\t', bgGreen('\nScore'), cyan('Pareto :'), ploglik, prop.p, cyan('Binomial :'), dloglik, 1-prop.p, cyan('BIC :'), bic, ' --> score : ', score,  '\n')
if(do.plot) {
par(mfrow = c(5, 1))
fname = paste('separeto_', c, '.pdf', sep = '')
all = rbind(yh, yl)
# Histograms
ah.fit = hist(all$s_n/all$t_n, breaks = 100, plot = FALSE)
ah.fit$counts = ah.fit$counts/max(ah.fit$counts)
ph.fit = hist(yh$s_n/yh$t_n, breaks = 100, plot = FALSE)
ph.fit$counts = ph.fit$counts/max(ph.fit$counts)
bh.fit = hist(yl$s_n/yl$t_n, breaks = 100, plot = FALSE)
bh.fit$counts = bh.fit$counts/max(bh.fit$counts)
# Densities
domain = seq(0, 1, 0.01)
pd = dpareto(domain, scale = pareto.fit[1], shape = pareto.fit[2])
pd = pd/max(pd)
trials = floor(mean(yl$t_n))
mbd = mmdensity(mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K, trials = trials)
mbd$mixture = mbd$mixture/max(mbd$mixture)
# Plot all data
plot(ah.fit, col = 'black', main = 'VAFs', border = NA, xlim = c(0, 1))
# Plot Pareto
plot(ph.fit, col = 'lightcoral', main = bquote(bold('Pareto') ~ 1/f ~ ': n = ' ~.(nrow(yh)) ~ pi == .(prop.p)), border = NA, xlim = c(0, 1))
legend('topright',
legend = c(paste('scale:', pareto.fit[1]), paste('shape:', pareto.fit[2])),
col = 'lightcoral', pch = 19, title = 'MLE Fit', bty = 'n')
lines(domain, pd, type = 'l', col = 'red')
par(new = TRUE)
plot(bh.fit, col = 'gainsboro', border = NA, xlim = c(0, 1), add = TRUE)
# Plot Binomial
plot(bh.fit, col = 'lightblue', main = bquote(bold('Binomial Mixture') ~ ': n = ' ~.(nrow(yl)) ~ pi == .(1-prop.p)), border = NA, xlim = c(0, 1))
par(new = TRUE)
plot(ph.fit, col = 'gainsboro', border = NA, xlim = c(0, 1), add = TRUE)
# mixing proportions and parameters of the mixture
# plot mean
plot(mbd$x, mbd$mixture,
col = 'steelblue',
type = 'l',
main = bquote(bold('Mixture density at') ~ C[symbol("\052")] == .(trials)),
lwd = 2
)
# ,
#      ylab = 'mixture density',
#      xlab = 'expected num. mutated reads',
#      main = bquote(bold('Mixture density at') ~ C[symbol("\052")] == .(trials)))
#
pplot.beta(mbinomial.fit$a, mbinomial.fit$b, 0.01, mbinomial.fit$pi_k, "Beta Posteriors (Mixture)")
dev.copy2pdf(file = fname)
vb_bmm_summary(mbinomial.fit)
dev.copy2pdf(file = 'bs.pdf')
jamPDF(in.files = c(fname, 'bs.pdf'), out.file = fname)
}
return(list(pareto = pareto.fit,
mbinomial = mbinomial.fit,
ploglik = round(ploglik, 2),
dloglik = round(dloglik, 2),
bic = round(bic, 2),
prop = c(prop.p, 1-prop.p),
K = K,
score = score))
}
cutoffs = names(x)
fit = lapply(cutoffs, sfit)
do.plot=F
fit = lapply(cutoffs, sfit)
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
y = x[[c]]
x=bs
y = x[[c]]
bs
x
c
c
c = '0.01'
cat(bgRed('[Fit]'), c, '\n')
y = x[[c]]
yw = y[['WITHIN']]
yh = y[['HIGHER']]
yl = y[['LOWER']]
# Assumption: within is neutral tail
ntotal = sum(sapply(y, nrow))
y
y = x[[c]]
x
names(x)
c='0.1'
y = x[[c]]
y
yw = y[['WITHIN']]
yh = y[['HIGHER']]
yl = y[['LOWER']]
# Assumption: within is neutral tail
ntotal = sum(sapply(y, nrow))
prop.p = (nrow(yh) + nrow(yw))/ntotal
prop.p
yh = rbind(yh, yw)
cat('\t', bgBlue('[PROPORTIONS]'), cyan('Pareto :'), prop.p, cyan('MBinomial :'), (1-prop.p), '\n')
pareto.fit = pareto.MLE(yh$s_n/yh$t_n)
cat('\t', bgBlue('[PARETO]'), cyan('scale :'), pareto.fit[1], cyan('shape :'), pareto.fit[2], '\n')
mbinomial.fit = vb_bmm1D_fit(
X = yl[, c('s_n', 't_n')],
K = 10,
alpha_0 = 1e-8,
a_0 = 1,
b_0 = 1,
max_iter = NA,
epsilon_conv = 1e-5, # -8 !!!!!
is_verbose = FALSE,
restarts = 1  # 3 !!!!!
)
pll = function(x, m, a) {
n = length(x)
logx = sum(log(x))
ll = (n * log(a) + n * log(m) - (a+1) * logx)
}
# ploglik = sum(dpareto(yh$s_n/yh$t_n, scale = pareto.fit[1], shape = pareto.fit[2], log = TRUE))
ploglik = pll(yh$s_n/yh$t_n, pareto.fit[2], pareto.fit[1])
ploglik
dloglik = - dbmixture(yl, mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K) + log(1-prop.p)
dloglik
dloglik = - dbmixture(yl, mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K)
dloglik
dloglik
dloglik
print(dbmixture(yl, mbinomial.fit$pi_k, mbinomial.fit$theta_k, mbinomial.fit$K))
print(1-prop.p)
mbinomial.fit$pi_k[mbinomial.fit$pi_k > 0.01]
K = length(mbinomial.fit$pi_k[mbinomial.fit$pi_k > 0.01])
nrow(yh) + nrow(yl)
bic = (K + 1) * log(nrow(yh) + nrow(yl)) / 2
log(prop.p) + ploglik
ploglik
log(prop.p)
prop.p
log(prop.p)
prop.p
ploglik
dbmixture
ploglik
exp(ploglik)
ploglik
dloglik
log(1-prop.p) + dloglik
dloglik
(1-prop.p) * dloglik
# score =  log(prop.p) + ploglik +  log(1-prop.p) + dloglik - bic
score =  (prop.p) * ploglik +  (1-prop.p) * dloglik - bic
cat('\t', bgGreen('\nScore'), cyan('Pareto :'), ploglik, prop.p, cyan('Binomial :'), dloglik, 1-prop.p, cyan('BIC :'), bic, ' --> score : ', score,  '\n')
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
quartz(height = 16, width = 15)
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
discrdist
w = bs$`0.1`$LOWER
w
w = bs$`0.1`$HIGHER
fit = pareto.MLE(w$s_n/w$t_n)
fit
pll = function(x, m, a) {
n = length(x)
logx = sum(log(x))
ll = (n * log(a) + n * log(m) - (a+1) * logx)
}
pll(yh$s_n/yh$t_n, pareto.fit[2], pareto.fit[1])
pll = function(x, m, a) {
n = length(x)
logx = sum(log(x))
ll = (n * log(a) + n * log(m) - (a+1) * logx)
ll
}
# ploglik = sum(dpareto(yh$s_n/yh$t_n, scale = pareto.fit[1], shape = pareto.fit[2], log = TRUE))
pll(w$s_n/w$t_n, pareto.fit[2], pareto.fit[1])
# ploglik = sum(dpareto(yh$s_n/yh$t_n, scale = pareto.fit[1], shape = pareto.fit[2], log = TRUE))
pll(w$VAF, pareto.fit[2], pareto.fit[1])
dpareto(w$VAF, pareto.fit[2], pareto.fit[1])
dpareto(w$VAF, pareto.fit[2], pareto.fit[1], log = T)
sum(dpareto(w$VAF, pareto.fit[2], pareto.fit[1], log = T))
pll(w$VAF, pareto.fit[2], pareto.fit[1])
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
sum(dpareto(w$VAF, pareto.fit[1], pareto.fit[2], log = T))
pareto.fit
dpareto
pareto.fit[2]
sum(dpareto(w$VAF, shape = pareto.fit[2], scale = pareto.fit[1], log = T))
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
getwd()
timon <- readRDS("~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/simulation_results_theide_blinded.rds")
quartz(height = 16, width = 15)
d = getwd()
for(id in names(timon))
{
dir.create(id)
setwd(id)
x = timon[[id]]
x = x$data
print(timon[[id]])
dev.copy2pdf(file = 'timon.pdf')
# timon = timon[sample(1:nrow(timon), 1000), ]
bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.9, 0.1))
# bs = bsepareto(x$alt, x$depth, nboot = 1000, purity = 1, cutoff.neutral.tail = seq(.1, 0.7, 0.1))
f = separeto.fit(bs)
save(bs, file = 'bs.RData')
save(f, file = 'fit.RData')
setwd(d)
readline('\n... ')
}
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/Separeto.R')
source('~/Documents/GitHub/VBDBMM/real_data/Tests-Neutrality/SePareto/FitFunctions.R')
mb = generate_frequencies(500, 100, 1, p = .71, 0.08, 10, 1, 0.01, 3, 0.01)
#### Use these to source -- see loader.R
source('../../../src/loader.R')
loader()
loader()
mb = generate_frequencies(500, 100, 1, p = .71, 0.08, 10, 1, 0.01, 3, 0.01)
mb = generate_frequencies(500, 100, 2, p = .71, 0.08, 10, 1, 0.01, 3, 0.01)
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, 1, 0.01, 3, 0.01)
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, .4, 0.01, 3, 0.01)
mb
hist(mb$s_n/mb$t_n)
hist(mb$s_n/mb$t_n, breaks = 22)
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, pi_clonal = .4, 0.01, 3, 0.01)
hist(mb$s_n/mb$t_n, breaks = 22)
plot_bindata(mb$s_n, mb$t_n, 'Binomial clusters')
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, pi_clonal = .4, 0.01, 3, 0.01)
plot_bindata(mb$s_n, mb$t_n, 'Binomial clusters')
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, pi_clonal = .4, 0.01, 3, 0.01)
plot_bindata(mb$s_n, mb$t_n, 'Binomial clusters')
mb = generate_frequencies(N = 500, C = 100, K = 2, p = 1, 0.08, 10, pi_clonal = .4, 0.01, 3, 0.01)
plot_bindata(mb$s_n, mb$t_n, 'Binomial clusters')
N = 100
scale = .05
shape = 1
t_n = NULL
C = .6
C.overdispersion = 0.08
t_n = NULL
t_n = VGAM::rbetabinom(N, round(C / 0.6), prob = 0.6, rho = C.overdispersion)
t_n
C = 100
t_n = VGAM::rbetabinom(N, round(C / 0.6), prob = 0.6, rho = C.overdispersion)
t_n
C.min
rd
rd = rpareto(N, scale = scale, shape = shape)
rd
rd
s_n = t_n * rd
hist(s_n/t_n, breaks =100)
shape=.05
rd = rpareto(N, scale = scale, shape = shape)
s_n = t_n * rd
shape=.05
hist(s_n/t_n, breaks =100)
hist(s_n/t_n, breaks =100)
x = seq(0,1,0.01)
quartz()
p = x^{-a-1}
a=1
p = x^{-a-1}
p
plot(x,p)
p = x^{-a-1}
plot(x,p)
x = seq(0,1,0.01)
a=1
p = x^{-a-1}
plot(x,p)
dev.cur()
a=144
p = x^{-a-1}
plot(x,p)
x = seq(0,1,0.01)
a=1
p = x^{-a-1}
plot(x,p)
yp = dpareto(x, scale = .05, shape = 1)
plot(x, yp)
plot(x, yp, type = 'l')
yb = dbeta(x, shape1 = 45, shape2 = 87)
plot(x, yb, type = 'l')
yb = dbeta(x, shape1 = 55, shape2 = 87)
plot(x, yb, type = 'l')
yb = dbeta(x, shape1 = 65, shape2 = 87)
plot(x, yb, type = 'l')
pt = .4
mxd = pt*yp + (1-pt)*yb
plot(x, mxd, type = 'l')
