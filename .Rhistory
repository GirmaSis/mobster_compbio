geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('') + ylab('') +
scale_x_continuous(labels = NULL) +
theme_classic(base_size = 7 * cex) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
c
r2
cumdf
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme_classic(base_size = 7 * cex) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme_classic(base_size = 7 * cex) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme_classic(base_size = 7 * cex,   panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")
) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(base_size = 7 * cex,   panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")
) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid")
) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(panel.background = element_rect(fill = "gainsboro", colour = "lightblue", size = 0.5, linetype = "solid")
) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "lightblue", size = 0.5, linetype = "solid")) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "gray", size = 0.5, linetype = "solid")) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "white", size = 0.5, linetype = "solid")) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(
panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('M(f)') +
# scale_x_continuous(labels = NULL) +
theme(
panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "dashed", fill = NA)) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
r2
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
domain = seq(0, 1, 0.01)
labels = names(x$pi)
labels.betas = colnames(x$beta)
pi = x$pi
ICL = round(as.numeric(x$scores$ICL), 2)
NLL = round(as.numeric(x$scores$NLL), 2)
K = as.numeric(x$K)
col = RColorBrewer::brewer.pal(
RColorBrewer::brewer.pal.info[palette, 'maxcolors'], palette)
col = colorRampPalette(col)(x$Kbeta)
col.histogram = c(tail.color[1], col)
col.lines = c(tail.color[2], col)
names(col.histogram) = names(col.lines) = labels
palette = 'Spectral'
tail.color = c('gainsboro', 'darkgray')
col = RColorBrewer::brewer.pal(
RColorBrewer::brewer.pal.info[palette, 'maxcolors'], palette)
col = colorRampPalette(col)(x$Kbeta)
col.histogram = c(tail.color[1], col)
col.lines = c(tail.color[2], col)
names(col.histogram) = names(col.lines) = labels
# Plot 1 -- main histogram
df = data.frame(X = x$X, Cluster = x$labels, Color = col[x$labels])
vvv = lapply(1:x$K,
function(w)
data.frame(X = domain,
Cluster = labels[w],
y = ddbpmm(x, data = domain, components = w, log = FALSE)))
names(vvv) = labels
# Histogram coloured according to clustering assignments
tit = bquote(bold("dbpmm fit.   ") ~ K['Beta']~'=' ~ .(x$Kbeta) ~ '    Tail: OFF')
if(!all(is.na(x$tail)))
tit = bquote(bold("dbpmm fit.   ") ~
K['Beta']~'=' ~ .(x$Kbeta)  ~ '   '~
tau['tail'] ~'='~.(round(x$shape, 2)) ~ ' '~ gamma['tail'] ~'='~.(round(x$scale, 2)))
ggplot(df, aes(X, fill = Cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = col.histogram) +
labs(
title = tit,
subtitle = annotation,
x = "Observed Frequency", y = "") +
guides(fill = FALSE) +
theme_pander(base_size = 10 * cex)
annotation=NULL
ggplot(df, aes(X, fill = Cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = col.histogram) +
labs(
title = tit,
subtitle = annotation,
x = "Observed Frequency", y = "") +
guides(fill = FALSE) +
theme_pander(base_size = 10 * cex)
source('~/Documents/GitHub/dbpmm/R/plots.R')
ggplot() +
labs(
title = bquote(italic("Initialization")),
x = "", y = "") +
guides(fill = FALSE) +
ylim(0, maxBeta) +
theme(
panel.background = element_rect(fill = alpha("gainsboro", 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "dashed", fill = NA))
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
source('~/Documents/GitHub/dbpmm/R/plots.R')
plot(x)
library(dbpmm)
plot(x)
source('~/Documents/GitHub/dbpmm/R/plots.R')
load("~/Documents/GitHub/test.dbpmm/Popgen_batch_1.1/results/0cf60563445283deda6ed66a787c9224a8dd7544-allRuns.RData")
plot(res$best)
load("~/Documents/GitHub/test.dbpmm/Popgen_batch_1.1/results/0cf60563445283deda6ed66a787c9224a8dd7544-allRuns.RData")
require(dbpmm)
plot(res$best)
requires(dbpmm)
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best)
plot(res$best, cex = 2)
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best, cex = 2)
plot(res$best)
library(dbpmm)
plot(res$best)
library(dbpmm)
plaw.ranges = c(0.1, 0.3)
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
tail.X
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
x=res$best
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
tail.X = tail.X[tail.X > plaw.ranges[1] & tail.X < plaw.ranges[2]]
tail.X
ht = hist(tail.X, breaks = seq(0, 1, 0.01), plot = FALSE)
ht
plot(ht)
cms = cumsum(ht$counts)
cms
plot(cms)
cms = cms[1:which.max(cms)]
plot(cms)
cms
which.min(cms)
cms = cms[cms > 0]
plot(cms)
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
tail.X = tail.X[tail.X > plaw.ranges[1] & tail.X < plaw.ranges[2]]
ht = hist(tail.X, breaks = seq(plaw.ranges[1], plaw.ranges[2], 0.01), plot = FALSE)
plot(ht)
cms = cumsum(ht$counts)
cms
# cumdf = sort(1/tail.X)
cumdf = data.frame(x = (1:length(cms)) * 0.01, y = cms)
rs = lm_eqn(cumdf)
x.tail = seq(plaw.ranges[1], plaw.ranges[2], 0.01)
# cumdf = sort(1/tail.X)
cumdf = data.frame(x = x.tail, y = cms)
x.tail
cms
x.tail = seq(plaw.ranges[1], plaw.ranges[2], 0.01)
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
tail.X = tail.X[tail.X >= plaw.ranges[1] & tail.X <= plaw.ranges[2]]
ht = hist(tail.X, breaks = x.tail, plot = FALSE)
cms = cumsum(ht$counts)
# cumdf = sort(1/tail.X)
cumdf = data.frame(x = x.tail, y = cms)
cumdf
data.frame(x = x.tail, y = cms)
x.tail
plaw.ranges
## Cumdensity for the tail
tail.X = x$X[x$labels == 'Tail']
tail.X = tail.X[tail.X >= plaw.ranges[1] & tail.X <= plaw.ranges[2]]
ht = hist(tail.X, breaks = x.tail, plot = FALSE)
cms = cumsum(ht$counts)
# cumdf = sort(1/tail.X)
cumdf = data.frame(x = x.tail[1:length(cms)], y = cms)
rs = lm_eqn(cumdf)
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('Cumulative M(f)') +
# scale_x_continuous(labels = NULL) +
theme(
panel.background = element_rect(fill = alpha("goldenrod1", 0.2), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "dashed", fill = NA, size = 0.5)) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
cex=1
r2 = ggplot(data = cumdf, aes(x = x, y = y)) +
geom_point(shape = 21, colour = "black", size = 1 * cex, stroke = 1) +
geom_smooth(method='lm', colour = "red") +
guides(fill=FALSE) +
labs(title  = bquote(italic('Power-law'))) +
xlab('f ~ VAF') + ylab('Cumulative M(f)') +
# scale_x_continuous(labels = NULL) +
theme(
panel.background = element_rect(fill = alpha("goldenrod1", 0.2), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype = "dashed", fill = NA, size = 0.5)) +
annotate("text", x = Inf, y = min(cumdf$y) + 3, label = paste("R^2 == ", rs), hjust = 1, parse = T, size = 2 * cex)
rs = lm_eqn(cumdf)
library(dbpmm)
plot(res$best)
library(dbpmm)
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best)
plot(res$best, bg.color = 'ivory3')
plot(res$best, bg.color = ggplot2::alpha('ivory3', 0.3))
plot(res$best, bg.color = ggplot2::alpha('ivory3', 0.03))
ggplot2::alpha('ivory3', 0.03)
ggplot2::alpha
plot(res$best, bg.color = ggplot2::alpha('ivory3', 1))
plot(res$best, bg.color = ggplot2::alpha('ivory1', 1))
plot(res$best, bg.color = ggplot2::alpha('ivory2', 1))
plot(res$best, bg.color = ggplot2::alpha('ivory2', 1))
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best)
plot(res$best)
library(dbpmm)
library(dbpmm)
plot(res$best)
library(dbpmm)
plot(res$best)
plot(res$best)
library(dbpmm)
plot(res$best)
library(dbpmm)
x
x$params
x$all.NLL
plot(x$all.NLL)
x$labels
x$tail
x$a
x$beta
data.frame(x$beta[c('mean', 'var')])
data.frame(x$beta[c('mean', 'var'), ])
colnames(tab.annotations) = colnames(x$beta)
gridExtra::tableGrob(tab.annotations, rows=NULL)
tab.annotations = data.frame(x$beta[c('mean', 'var'), ])
colnames(tab.annotations) = colnames(x$beta)
gridExtra::tableGrob(tab.annotations, rows=NULL)
library(dbpmm)
plot(x)
plot(x)
library(dbpmm)
plot(x)
library(dbpmm)
library(dbpmm)
plot(x)
plot(x)
library(dbpmm)
col.histogram
col = RColorBrewer::brewer.pal(
RColorBrewer::brewer.pal.info[palette, 'maxcolors'], palette)
col = colorRampPalette(col)(x$Kbeta)
col.histogram = c(tail.color[1], col)
col.lines = c(tail.color[2], col)
palette ='Set1'
col = RColorBrewer::brewer.pal(
RColorBrewer::brewer.pal.info[palette, 'maxcolors'], palette)
col = colorRampPalette(col)(x$Kbeta)
col.histogram = c(tail.color[1], col)
tail.color = c('gainsboro', 'darkgray')
col.histogram = c(tail.color[1], col)
col.lines = c(tail.color[2], col)
names(col.histogram) = names(col.lines) = labels
col.histogram
labels = names(x$pi)
col.histogram
names(col.histogram) = names(col.lines) = labels
col.histogram
extented.labels = labels
extented.labels
extented.labels
labels
x$beta
paste(x$beta[c('mean', 'var'), ])
format(x$beta, scientific = T)
format(x$beta, scientific = T, digits = 2)
format(x$beta, scientific = F, digits = 2)
betavals = x$beta
betavals
betavals = x$beta[c('mean', 'var'), ]
betavals
betavals['mean', ] = round(betavals['mean', ], 2)
round(betavals['mean', ], 2)
betavals
betavals = x$beta[c('mean', 'var'), , drop = FALSE]
betavals
round(betavals['mean', ], 2)
round(betavals['mean', ], 3)
betavals['mean', ] = round(betavals['mean', ], 3)
betavals
format(betavals['var', ] , scientific = T, digits = 3)
betavals['var', ]  = format(betavals['var', ] , scientific = T, digits = 3)
bquote('Tail '~ alpha ~'='~.(round(x$shape, 2)) ~ ' '~ x['*'] ~'='~.(round(x$scale, 2)))
betavals
apply(betavals, 2, function(w) paste(w['mean'], '(', w['var'], ')', sep = ''))
apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = ''))
extented.labels[2:length(extented.labels)] = apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = ''))
extented.labels
extented.labels = labels
if(!all(is.na(x$tail))) extented.labels[1] = bquote('Tail '~ alpha ~'='~.(round(x$shape, 2)) ~ ' '~ x['*'] ~'='~.(round(x$scale, 2)))
betavals
extented.labels
apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = ''))
paste(names(extented.labels[2:length(extented.labels)]), apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = '')))
extented.labels
paste(extented.labels[2:length(extented.labels)], apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = '')))
library(dbpmm)
plot(x)
plot(res$best)
library(dbpmm)
plot(res$best)
plot(res$best)
library(dbpmm)
library(dbpmm)
plot(res$best, palette = 'Set2')
library(dbpmm)
plot(res$best, palette = 'Set2')
plot(res$best, palette = 'Set1', alpha = .9)
# Plot 1 -- main histogram
df = data.frame(X = x$X, Cluster = x$labels, Color = col[x$labels])
library(dbpmm)
# Plot 1 -- main histogram
df = data.frame(X = x$X, Cluster = x$labels, Color = col[x$labels])
df
unique(x$labels)
labels
col.histogram
extented.labels
extented.labels = labels
if(!all(is.na(x$tail))) extented.labels[1] = paste('Tail shape =', round(x$shape, 2), ' x >', round(x$scale, 2))
else extented.labels[1] = bquote('Tail: OFF')
betavals = x$beta[c('mean', 'var'), , drop = FALSE]
betavals['mean', ] = round(betavals['mean', ], 3)
betavals['var', ]  = format(betavals['var', ] , scientific = T, digits = 3)
extented.labels[2:length(extented.labels)] = paste(extented.labels[2:length(extented.labels)], apply(betavals, 2, function(w) paste(w['mean'], ' (', w['var'], ')', sep = '')))
extented.labels
str(df)
levels(df$Cluster)
extented.labels
labels
extented.labels = levels(df$Cluster)
extented.labels
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
paste(C, 1:x$Kbeta, sep = '')
paste('C', 1:x$Kbeta, sep = '')
betavals
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
x$fit.type
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
library(dbpmm)
plot(res$best, palette = 'Set1', alpha = .7)
plot(res$best, palette = 'Set1', alpha = .7)
library(dbpmm)
library(dbpmm)
plot(res$best, palette = 'Set3', alpha = .7)
plot(res$best, alpha = .8)
setwd("~/Documents/GitHub/test.dbpmm/Popgen_batch_1.1_coverage")
