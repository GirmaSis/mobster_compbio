#'
#' @return
#' @export
#'
#' @examples
summary.vb_bmm <- function(x, ...) {
print.vb_bmm(x, ...)
}
#' Title
#'
#' @param x
#' @param pi.cutoff
#'
#' @return
#' @export
#'
#' @examples
print.vb_bmm <- function(x, pi.cutoff = 0.01) {
stopifnot(inherits(x, "vb_bmm"))
pioHdr('MOBSTER Binomial mixture')
pio::pioStr("\n Points", paste0("N = ",  nrow(x$X)))
pio::pioStr("\nSamples", paste0("W = ",  nrow(x$theta_k)))
pio::pioStr("\n\n Status",  paste0(x$status, ' (', length(x$ELBO), ' steps)'))
pio::pioStr("\n\nBinomial parameters", '\n')
pio::pioDisp(round(x$theta_k, 2))
pio::pioStr("\nProportions", '', suffix = '\n')
pio::pioDisp(x$pi_k)
}
########### Private function
# Subset clusters with freq below a cutoff -- maintain the object consistency
choose_clusters = function(x, pi.cutoff)
{
table_pi = tibble(cluster = names(x$pi_k), pi = x$pi_k)
table_pi = table_pi %>%
mutate(accepted = pi > pi.cutoff) %>%
arrange(desc(pi))
# partitions of clusters
detect.clones = table_pi %>% filter(pi > pi.cutoff)
rejected.clones = table_pi %>% filter(pi <= pi.cutoff)
K = nrow(detect.clones)
K.rj = nrow(rejected.clones)
# Mapping old labels to new ones
table_pi$new.labels = paste0('C', 1:nrow(table_pi))
mapping = table_pi$new.labels
names(mapping) = table_pi$cluster
# rename all entries with reference to the labels
x$X$Binomial.cluster = mapping[x$X$Binomial.cluster]
names(x$alpha) = names(x$pi_k) = names(x$alpha_0) = mapping[names(x$alpha_0)]
colnames(x$a) = colnames(x$b) = colnames(x$a_0) = colnames(x$b_0) =
colnames(x$r_nk) = colnames(x$theta_k) =
mapping[colnames(x$theta_k)]
# print some info about what has been selected
table_pi = table_pi %>% mutate(cluster = new.labels) %>% select(-new.labels)
pio::pioStr("\nNumber of input clusters", paste0('K = ', x$K))
pio::pioStr(
"\nFit",
paste0('K = ', K),
prefix = '\n',
suffix = paste0('[pi > ', pi.cutoff, ']\n\n')
)
print(table_pi)
# now drop useless clusters and re-normalize the variables
detect.clones = table_pi %>% filter(pi > pi.cutoff) %>% pull(cluster)
x$alpha = x$alpha[detect.clones]
x$pi_k = x$pi_k[detect.clones]
x$alpha_0 = x$alpha_0[detect.clones]
x$alpha = x$alpha[detect.clones]
x$a = x$a[, detect.clones, drop = FALSE]
x$b = x$b[, detect.clones, drop = FALSE]
x$a_0 = x$a_0[, detect.clones, drop = FALSE]
x$b_0 = x$b_0[, detect.clones, drop = FALSE]
x$r_nk = x$r_nk[, detect.clones, drop = FALSE]
x$theta_k = x$theta_k[, detect.clones, drop = FALSE]
# renormalize latent variables
C = rowSums(x$r_nk)
for (i in 1:nrow(x$r_nk))
x$r_nk[i,] = x$r_nk[i,] / C[i]
# renormalize mixing proportions
C = sum(x$pi_k)
x$pi_k = x$pi_k / C
# recompute clustering assignments..
labels = mobster:::latent_vars_hard_assignments(lv = list(`z_nk` = x$r_nk,
`pi` = x$pi_k))
x$X$Binomial.cluster = labels
# Update num of clusters
x$K = K
x
}
obj = single_model() # fit
fit = mobster_fit_binomial(fit)
library(mobster)
load('../test.dbpmm/Multi-region Tests/MSeq2.0/data/Set07.RData')
library(mobster)
input$segments = input$segments[
apply(input$segments[, 4:ncol(input$segments)],
1,
function(w) all(w == 1)), ]
purity = rep(1, length(input$samples))
names(purity) = input$samples
dataset = mobster::mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
library(mobster)
dataset = mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
devtools::document()
library(mobster)
load('../test.dbpmm/Multi-region Tests/MSeq2.0/data/Set07.RData')
library(mobster)
input$segments = input$segments[
apply(input$segments[, 4:ncol(input$segments)],
1,
function(w) all(w == 1)), ]
purity = rep(1, length(input$samples))
names(purity) = input$samples
dataset = mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
devtools::document()
devtools::document()
dataset = mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
require(pio)
dataset = mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
purity = mobster:::mobster_purity(dataset, peak.range = c(.3, .6))
purity = purity$purity
names(purity) = input$samples
dataset = mobster::mobster_dataset(
input$muts,
input$samples,
description = "My own dataset",
input$segments,
purity,
N.min = 500,
na.rm = TRUE
)
dataset = mobster_flt_dprange(dataset, 50, 100)
dataset = mobster_flt_minfreq(dataset, 0.05)
dataset = mobster_flt_vafrange(dataset, 0.05, 0.7)
# MOBSTER
# fit = mobster_fit_multivariate(dataset, n = 1, K = 2)
fit = mobster_fit_multivariate(dataset, parallel = TRUE, n = 1)
fit
save(fit, file = 'fit_tmp.RData')
# sciClone
# fit = mobster_fit_sciClone(fit)
fit = mobster_fit_binomial(fit)
# sciClone
# fit = mobster_fit_sciClone(fit)
fit = mobster_fit_binomial(fit, K = 8)
# sciClone
# fit = mobster_fit_sciClone(fit)
fit = mobster_fit_binomial(fit, K = 10)
save(fit, file = 'fit_tmp.RData')
Clusters(fit, 'B')
samples
library(mobster)
mobster_plt_2DVAF_matrix(fit, cluster = Clusters(fit, 'B'), cluster.label = 'Binomial.cluster')
library(mobster)
mobster_plt_2DVAF_matrix(fit, cluster = Clusters(fit, 'B'), cluster.label = 'Binomial.cluster')
library(mobster)
mobster_plt_2DVAF_matrix(fit, cluster = Clusters(fit, 'B'), cluster.label = 'Binomial.cluster')
library(mobster)
mobster_plt_2DVAF_matrix(fit, cluster = Clusters(fit, 'B'), cluster.label = 'Binomial.cluster')
# projected + sciClone
fit_projected_global = mobster_flt_projection(fit, type = 'global')
fit_projected_global
fit_projected_global = mobster_fit_binomial(fit_projected_global, K = 10)
mobster_plt_2DVAF_matrix(fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.clusters')
mobster_plt_2DVAF_matrix(fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster')
x=fit_projected_global
samples = x$samples
MOBSTER = !is.null(x$fit.MOBSTER)
MOBSTER
cluster = Clusters(fit_projected_global, 'B')
cluster.label = 'Binomial.cluster'
cluster
MB.figure = best.MOBSTER.plots = NULL
if(MOBSTER)
{
best.MOBSTER = lapply(x$fit.MOBSTER, function(w) w$best)
best.MOBSTER.plots = mobster:::plot_diagonal_MOBSTER(best.MOBSTER, samples, cex = cex)
MB.figure = ggpubr::ggarrange(
plotlist = best.MOBSTER.plots,
nrow = 1,
ncol = length(best.MOBSTER),
labels = LETTERS[seq(best.MOBSTER)]
)
panel.labels = panel.labels[-seq(best.MOBSTER)]
}
cex= 1
if(MOBSTER)
{
best.MOBSTER = lapply(x$fit.MOBSTER, function(w) w$best)
best.MOBSTER.plots = mobster:::plot_diagonal_MOBSTER(best.MOBSTER, samples, cex = cex)
MB.figure = ggpubr::ggarrange(
plotlist = best.MOBSTER.plots,
nrow = 1,
ncol = length(best.MOBSTER),
labels = LETTERS[seq(best.MOBSTER)]
)
panel.labels = panel.labels[-seq(best.MOBSTER)]
}
panel.labels = LETTERS
title = x$description
best.MOBSTER = lapply(x$fit.MOBSTER, function(w) w$best)
best.MOBSTER.plots = mobster:::plot_diagonal_MOBSTER(best.MOBSTER, samples, cex = cex)
MB.figure = ggpubr::ggarrange(
plotlist = best.MOBSTER.plots,
nrow = 1,
ncol = length(best.MOBSTER),
labels = LETTERS[seq(best.MOBSTER)]
)
panel.labels = panel.labels[-seq(best.MOBSTER)]
best.MOBSTER.plots
panel.labels
plots = NULL
id = 1
for (s in seq(samples)) {
for (w in s:length(samples)) {
if (s != w) {
pl.1 = mobster_plt_2DVAF(
obj = x,
x = samples[s],
y = samples[w],
cluster = cluster,
cluster.label = cluster.label)
fig = ggpubr::ggarrange(pl.1, nrow = 1, ncol = 1, labels = panel.labels[id])
plots = append(plots, list(fig))
id = id + 1
}
}
}
S = length(samples)
layout = matrix(0, ncol = S, nrow = S)
if(!is.null(MB.figure)) diag(layout) = 1:S
layout
layout = matrix(0, ncol = S, nrow = S)
if(MOBSTER) diag(layout) = 1:S
layout
combs = S * (S-1) / 2
layout[lower.tri(layout)] = (1:combs) + max(layout)
layout
mobster:::.multiplot(plotlist = append(best.MOBSTER.plots, plots), layout = layout, title = title)
Q
k = ceiling(sqrt(length(samples)))
twoBtwo = ggpubr::ggarrange(
plotlist = plots,
ncol = k,
nrow = k
)
twoBtwo
library(mobster)
library(mobster)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
)
)
x
MB.figure
k = ceiling(sqrt(length(samples)))
twoBtwo = ggpubr::ggarrange(
plotlist = plots,
ncol = k,
nrow = k
)
figure = ggpubr::ggarrange(
MB.figure,
twoBtwo,
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
MB.figure
twoBtwo
figure = ggpubr::ggarrange(
plotlist = append(MB.figure, twoBtwo),
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
figure = ggpubr::ggarrange(
plotlist = list(MB.figure, twoBtwo),
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
list(MB.figure, twoBtwo)
figure = ggpubr::ggarrange(
MB.figure,
twoBtwo,
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
k
length()
length(plots)
plots = NULL
id = 1
for (s in seq(samples)) {
for (w in s:length(samples)) {
if (s != w) {
pl.1 = mobster_plt_2DVAF(
obj = x,
x = samples[s],
y = samples[w],
cluster = cluster,
cluster.label = cluster.label)
fig = ggpubr::ggarrange(pl.1, nrow = 1, ncol = 1, labels = panel.labels[id])
plots = append(plots, list(fig))
id = id + 1
}
}
}
length(plots)
k = ceiling(sqrt(length(plots)))
k
twoBtwo = ggpubr::ggarrange(
plotlist = plots,
ncol = k,
nrow = k
)
figure = ggpubr::ggarrange(
MB.figure,
twoBtwo,
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
library(mobster)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
)
)
figure
twoBtwo
k = length(plots)/2
twoBtwo = ggpubr::ggarrange(
plotlist = plots,
ncol = 2,
nrow = k
)
twoBtwo
figure = ggpubr::ggarrange(
MB.figure,
twoBtwo,
ncol = 1,
nrow = 2,
heights = c(.15, 1)
)
figure
figure
figure = ggpubr::ggarrange(
MB.figure,
twoBtwo,
ncol = 1,
nrow = 2,
heights = c(.25, 1)
)
figure
figure
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 10, height = 10
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 10, height = 10
)
Q
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 10, height = 10
)
library(mobster)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 10, height = 10
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 12
)
library(mobster)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 12
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster',
cex = 1.6
),
width = 9, height = 12
)
warnings()
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 12
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 12
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 9
)
ggsave(
filename = 'a.pdf',
plot = mobster_plt_2DVAF_matrix(
fit_projected_global,
cluster = Clusters(fit_projected_global, 'B'),
cluster.label = 'Binomial.cluster'
),
width = 9, height = 9
)
