devtools::document()
K=1:3
tail = c(T, F)
samples = 3
tail = c(T, F)
tests = expand.grid(K, 1:samples, tail, stringsAsFactors = FALSE)
tests
tests = expand.grid(K = K, Run = 1:samples, tail = tail, stringsAsFactors = FALSE)
tests
tests = expand.grid(K = K,  tail = tail, Run = 1:samples, stringsAsFactors = FALSE)
tests
tests = tests[order(tests$tail, tests$K), ]
tests
tests = expand.grid(K = K, Run = 1:samples, tail = tail, stringsAsFactors = FALSE)
tests = tests[order(tests$tail, tests$K), ]
tests
foreach
??foreach
easypar::run(
FUN = function(x){},
PARAMS = lapply(1:10, list)
)
w = easypar::run(
FUN = function(x){},
PARAMS = lapply(1:10, list)
)
w = easypar::run(
FUN = function(x){},
PARAMS = lapply(1:10, list),
silent = F
)
w = easypar::run(
FUN = function(x){},
PARAMS = lapply(1:10, list),
silent = F,
packages = 'tidyverse'
)
require(mobster)
# 10 resamples
x = random_dataset(seed = 123, Beta_variance_scaling = 100, N = 500)
x
x = mobster_fit(x$data, epsilon = 1e-5)
plot(x$best)
bootstrap_results = mobster_bootstrap(x$best, n.resamples = 15, epsilon = 1e-5)
# Statistics ...
bootstrap_statistics = bootstrapped_statistics(x$best, bootstrap_results = bootstrap_results)
bootstrap_results
bootstrap_results$resamples
# Statistics ...
bootstrap_statistics = bootstrapped_statistics(x$best, bootstrap_results = bootstrap_results)
fit = x
resamples = bootstrap_results$resamples
bootstrap.fits = bootstrap_results$fits
n = length(bootstrap.fits)
pio::pioTit(paste("Bootstrap observations n =", n))
res = NULL
# Overall statistic: "model frequency"
models.tab = lapply(seq(bootstrap.fits),
function(w)
data.frame(
`resample` = w,
`tail` = bootstrap.fits[[w]]$fit.tail,
`K` =  bootstrap.fits[[w]]$Kbeta,
`Model` = paste0(
'K = ',
bootstrap.fits[[w]]$Kbeta,
ifelse(bootstrap.fits[[w]]$fit.tail,
" with tail",
" without tail")
),
stringsAsFactors = FALSE
))
bootstrap_results[[2]]
w
w=2
w=1
data.frame(
`resample` = w,
`tail` = bootstrap.fits[[w]]$fit.tail,
`K` =  bootstrap.fits[[w]]$Kbeta,
`Model` = paste0(
'K = ',
bootstrap.fits[[w]]$Kbeta,
ifelse(bootstrap.fits[[w]]$fit.tail,
" with tail",
" without tail")
),
stringsAsFactors = FALSE
)
bootstrap.fits[[w]]
bootstrap.fits[[2]]
sapply(bootstrap_results$fits, function(e) inherits(e, 'erorr'))
sapply(bootstrap_results$fits, function(e) inherits(e, 'error'))
bootstrap_results$fits = bootstrap_results$fits[!sapply(bootstrap_results$fits, function(e) inherits(e, 'error'))]
# Statistics ...
bootstrap_statistics = bootstrapped_statistics(x$best, bootstrap_results = bootstrap_results)
plot_bootstrap_model_frequency(bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_mixing_proportions(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_Beta(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
# plot
n = length(bootstrap_results$fits)
type = bootstrap_results$bootstrap
plt = function(s)
{
betas = bootstrap_statistics$bootstrap_values %>%
filter(statistics == s,
cluster != 'Tail')
fit = x$Clusters %>% filter(type == s,
cluster != 'Tail')
rg = c(min(betas$fit.value), max(betas$fit.value)) * c(0.25, 1.75)
bt = ggplot(data = betas,
aes(fit.value,
fill = cluster)) +
geom_histogram(bins = 100) +
geom_vline(data = fit, aes(xintercept = fit.value), size = 0.3) +
mobster:::my_ggplot_theme() +
xlim(rg[1], rg[2]) +
# facet( cluster ~ statistics, scale = 'free') +
labs(
title = bquote("Bootstrap Beta parameters"),
y = "Fit value",
x = paste("Beta", s),
subtitle = paste0('n = ', n, ' ', type, ' bootstraps.')
) +
guides(fill = FALSE)
bt = mobster:::add_fill_color_pl(x, bt, colors)
bt
}
mp = suppressWarnings(plt('Mean') + xlim(0, 1))
plt('Mean')
s='Mean'
betas = bootstrap_statistics$bootstrap_values %>%
filter(statistics == s,
cluster != 'Tail')
betas
x
x = x$best
plt = function(s)
{
betas = bootstrap_statistics$bootstrap_values %>%
filter(statistics == s,
cluster != 'Tail')
fit = x$Clusters %>% filter(type == s,
cluster != 'Tail')
rg = c(min(betas$fit.value), max(betas$fit.value)) * c(0.25, 1.75)
bt = ggplot(data = betas,
aes(fit.value,
fill = cluster)) +
geom_histogram(bins = 100) +
geom_vline(data = fit, aes(xintercept = fit.value), size = 0.3) +
mobster:::my_ggplot_theme() +
xlim(rg[1], rg[2]) +
# facet( cluster ~ statistics, scale = 'free') +
labs(
title = bquote("Bootstrap Beta parameters"),
y = "Fit value",
x = paste("Beta", s),
subtitle = paste0('n = ', n, ' ', type, ' bootstraps.')
) +
guides(fill = FALSE)
bt = mobster:::add_fill_color_pl(x, bt, colors)
bt
}
mp = suppressWarnings(plt('Mean') + xlim(0, 1))
mp = suppressMessages(plt('Mean') + xlim(0, 1))
vp = plt('Variance') + labs(title = bquote(" "), subtitle = ' ')
=
ggpubr::ggarrange(mp, vp, ncol = 2)
# plot
n = length(bootstrap_results$fits)
type = bootstrap_results$bootstrap
fit = x$data
ord_cl = order(x$data$cluster)
fit = fit[ord_cl,]
cocl = bootstrap_statistics$bootstrap_co_clustering[ord_cl, ord_cl] /
n
colnames(cocl) = rownames(cocl) = 1:ncol(cocl)
cocl[upper.tri(cocl)] = 0
bt = ggplot(data = cocl %>% reshape2::melt(),
aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = bquote("Bootstrap co-clustering probability"),
y = "Mutation",
x = "Mutation",
subtitle = paste0('n = ', n, ' ', type, ' bootstraps.')
) +
scale_fill_gradientn(colours = c(alpha('steelblue', .3), 'forestgreen', 'darkorange', 'darkred'),
values = c(0, 0.4, 0.8, 1),
aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_distiller(palette = 'Purples', direction = 1, aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_viridis_c(direction = -1, limits = c(0, 1), option = "plasma") +
guides(fill = guide_colorbar(title = 'Probability', barwidth = unit(3, 'cm')))
splits = cumsum(table(x$data$cluster))
splits = data.frame(cluster = names(splits),
n = as.vector(table(x$data$cluster)),
sum = splits, stringsAsFactors = FALSE)
splits
# add squares
bt = bt +
geom_segment(data = splits %>% mutate(x = sum, y = 0, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1.5) +
geom_segment(data = splits %>% mutate(x = sum - n, y = sum - n, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1.5) +
geom_segment(data = splits %>% mutate(x = sum(n), y = sum, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = .5, linetype = 'dashed')+
guides(color = guide_legend(''))
bt = mobster:::add_color_pl(x, bt, colors)
label = ggplot(data = fit %>% mutate(id = row_number()),
aes(x = 1, y = id, fill = cluster)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = ' ',
y = "MOBSTER Cluster",
x = " ",
subtitle = ' '
) +
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
guides(fill = guide_legend(''))
label = mobster:::add_fill_color_pl(x, label, colors)
cowplot::plot_grid(bt, label, ncol = 2, rel_widths = c(0.9, 0.2), align = 'h')
summary(boot_results$bootstrap_co_clustering)
summary(bootstrap_statisticsbootstrap_co_clustering)
summary(bootstrap_statistics$bootstrap_co_clustering)
summary(unlist(bootstrap_statistics$bootstrap_co_clustering))
max(bootstrap_statistics$bootstrap_co_clustering)
pheatmap::pheatmap(bootstrap_statistics$bootstrap_co_clustering)
# plot
n = length(bootstrap_results$fits)
n
cocl = bootstrap_statistics$bootstrap_co_clustering[ord_cl, ord_cl] /
n
colnames(cocl) = rownames(cocl) = 1:ncol(cocl)
cocl[upper.tri(cocl)] = 0
pheatmap::pheatmap(bootstrap_statistics$bootstrap_co_clustering, cluster_rows = F, cluster_cols = F)
pheatmap::pheatmap(cocl, cluster_rows = F, cluster_cols = F)
plot_bootstrap_Beta
devtools::doc
devtools::document()
devtools::document()
library(mobster)
plot_bootstrap_Beta(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
x$best
x
bootstrap_results
# 10 resamples
x = random_dataset(seed = 123, Beta_variance_scaling = 100, N = 500)
x = mobster_fit(x$data, epsilon = 1e-5)
plot(x$best)
plot_bootstrap_model_frequency(bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_mixing_proportions(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_Beta(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_coclustering(x$best, bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
diag(bootstrap_statistics$bootstrap_co_clustering)
ggplot()  + geom_blank()
plot_bootstrap_model_frequency(bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)
plot_bootstrap_model_frequency(bootstrap_results = bootstrap_results, bootstrap_statistics = bootstrap_statistics)  +scale_y_continuous(position = "right")
# plot
n = length(bootstrap_results$fits)
type = bootstrap_results$bootstrap
fit = x$data
ord_cl = order(x$data$cluster)
fit = fit[ord_cl,]
cocl = bootstrap_statistics$bootstrap_co_clustering[ord_cl, ord_cl] /
n
colnames(cocl) = rownames(cocl) = 1:ncol(cocl)
cocl[upper.tri(cocl)] = 0
bt = ggplot(data = cocl %>% reshape2::melt(),
aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = bquote("Bootstrap co-clustering probability"),
y = "Mutation",
x = "Mutation",
subtitle = paste0('n = ', n, ' ', type, ' bootstraps.')
) +
scale_fill_gradientn(colours = c(alpha('steelblue', .3), 'forestgreen', 'darkorange', 'darkred'),
values = c(0, 0.4, 0.8, 1),
aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_distiller(palette = 'Purples', direction = 1, aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_viridis_c(direction = -1, limits = c(0, 1), option = "plasma") +
guides(fill = guide_colorbar(title = 'Probability', barwidth = unit(3, 'cm')))
splits = cumsum(table(x$data$cluster))
splits = data.frame(cluster = names(splits),
n = as.vector(table(x$data$cluster)),
sum = splits, stringsAsFactors = FALSE)
# add squares
bt = bt +
geom_segment(data = splits %>% mutate(x = sum, y = 0, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1) +
geom_segment(data = splits %>% mutate(x = sum - n, y = sum - n, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1) +
geom_segment(data = splits %>% mutate(x = sum(n), y = sum, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = .5, linetype = 'dashed')+
guides(color = FALSE)
bt = mobster:::add_color_pl(x, bt, colors)
label = ggplot(data = fit %>% mutate(id = row_number()),
aes(x = 1, y = id, fill = cluster)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = ' ',
y = "MOBSTER Cluster",
x = " ",
subtitle = ' '
) +
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
guides(fill = guide_legend(''))+
scale_y_continuous(position = "right")
label = mobster:::add_fill_color_pl(x, label, colors)
cowplot::plot_grid(bt, label, ncol = 2, rel_widths = c(0.9, 0.2), align = 'h')
label
fit
x=x$best
# plot
n = length(bootstrap_results$fits)
type = bootstrap_results$bootstrap
fit = x$data
ord_cl = order(x$data$cluster)
fit = fit[ord_cl,]
cocl = bootstrap_statistics$bootstrap_co_clustering[ord_cl, ord_cl] /
n
colnames(cocl) = rownames(cocl) = 1:ncol(cocl)
cocl[upper.tri(cocl)] = 0
bt = ggplot(data = cocl %>% reshape2::melt(),
aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = bquote("Bootstrap co-clustering probability"),
y = "Mutation",
x = "Mutation",
subtitle = paste0('n = ', n, ' ', type, ' bootstraps.')
) +
scale_fill_gradientn(colours = c(alpha('steelblue', .3), 'forestgreen', 'darkorange', 'darkred'),
values = c(0, 0.4, 0.8, 1),
aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_distiller(palette = 'Purples', direction = 1, aes(alpha = .7), limits = c(0, 1)) +
# scale_fill_viridis_c(direction = -1, limits = c(0, 1), option = "plasma") +
guides(fill = guide_colorbar(title = 'Probability', barwidth = unit(3, 'cm')))
splits = cumsum(table(x$data$cluster))
splits = data.frame(cluster = names(splits),
n = as.vector(table(x$data$cluster)),
sum = splits, stringsAsFactors = FALSE)
# add squares
bt = bt +
geom_segment(data = splits %>% mutate(x = sum, y = 0, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1) +
geom_segment(data = splits %>% mutate(x = sum - n, y = sum - n, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = 1) +
geom_segment(data = splits %>% mutate(x = sum(n), y = sum, xend = sum, yend = sum),
inherit.aes = FALSE,
aes(x = x, y = y, xend = xend, yend = yend, color = cluster),
size = .5, linetype = 'dashed')+
guides(color = FALSE)
bt = mobster:::add_color_pl(x, bt, colors)
label = ggplot(data = fit %>% mutate(id = row_number()),
aes(x = 1, y = id, fill = cluster)) +
geom_tile() +
mobster:::my_ggplot_theme() +
labs(
title = ' ',
y = "MOBSTER Cluster",
x = " ",
subtitle = ' '
) +
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
guides(fill = guide_legend(''))+
scale_y_continuous(position = "right")
label
dev.new()
dev.new()
label
label = mobster:::add_fill_color_pl(x, label, colors)
cowplot::plot_grid(bt, label, ncol = 2, rel_widths = c(0.9, 0.2), align = 'h')
resamples  = bootstrap_results$resamples
resamples
fits = bootstrap_results$fits
fits
# sum up occurrences
.coocc = function(l, M)
{
cluster.labels = unique(l)
for (cl in cluster.labels)
{
# A unique is for nonparametric bootstrap
# where we resample the same samples twice
cl.assignments = unique(names(l[l == cl]))
if(is.null(cl.assignments) | length(cl.assignments) == 1) next;
cl.assignments = names(l[l == cl])
if(is.null(cl.assignments) | length(cl.assignments) == 1) next;
pairs = combn(cl.assignments, 2, simplify = F)
for (p in 1:length(pairs))
{
M[pairs[[p]][1], pairs[[p]][2]] = M[pairs[[p]][1],
pairs[[p]][2]] + 1
M[pairs[[p]][2], pairs[[p]][1]] = M[pairs[[p]][2],
pairs[[p]][1]] + 1
}
}
M
}
# number of resamples
n = length(fits)
# number of mutations
N = nrow(fits[[1]]$data)
# Still assuming that id is the row index of the VAF
co.clustering = matrix(0, nrow = N, ncol = N)
rownames(co.clustering) =
colnames(co.clustering) = 1:N
co.clustering
rownames(co.clustering) =
colnames(co.clustering) = 1:N
# Extract co-clustering labels
pb = txtProgressBar(0, length(fits), style = 3)
w=1
fits[[w]]$data
Clusters
Clusters(fits[[w]])
cluster.results = Clusters(fits[[w]], cutoff_assignment = 0)
cluster.results
cluster.labels = cluster.results$cluster
names(cluster.labels) = cluster.results$original.id
cluster.labels
cluster.labels[12]
table(names(cluster.labels))
cluster.labels[419]
cluster.labels['419']
cluster.results$original.id
table(cluster.results$original.id)
table(cluster.results$original.id) %>%sort
cluster.labels = cluster.results$cluster
names(cluster.labels) = cluster.results$original.id
cluster.results
cluster.results %>% filter(original.id == 59)
cluster.results %>% filter(original.id == '59')
cluster.labels = cluster.results$cluster
names(cluster.labels) = cluster.results$original.id
cluster.labels
cluster.labels['59']
table(names(cluster.labels))
table(names(cluster.labels)) %>% sort
cluster.results %>% filter(original.id == '59')
table(cluster.results$original.id) %>%sort
cluster.results$cluster
cluster.labels = cluster.results$cluster
names(cluster.labels) = cluster.results$original.id
table(cluster.results$original.id) %>%sort
cluster.labels['419']
cluster.labels[419]
co.clustering
l = cluster.labels
M = co.clustering
cluster.labels = unique(l)
cluster.labels
cl = 'Tail'
names(l[l == cl])
table(names(l[l == cl]))
# A unique is for nonparametric bootstrap
# where we resample the same samples twice
cl.assignments = unique(names(l[l == cl]))
cl.assignments
pairs = combn(cl.assignments, 2, simplify = F)
pairs
p=2
pairs[[p]][1]
for (p in 1:length(pairs))
{
M[pairs[[p]][1], pairs[[p]][2]] = M[pairs[[p]][1],
pairs[[p]][2]] + 1
M[pairs[[p]][2], pairs[[p]][1]] = M[pairs[[p]][2],
pairs[[p]][1]] + 1
}
M
summary(M)
pairs
cl.assignments
cl.assignments  =cl.assignments[1:3]
pairs = combn(cl.assignments, 2, simplify = F)
pairs
cl.assignments
