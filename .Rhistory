plot_2DVAF(data$data, 'VAF.B1', 'VAF.B2', 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
x = 'VAF.B1'
y = 'VAF.B2'
cluster = 'sciClone.cluster'
ggplot(data$data, aes(x = x, colour = cluster, y = y)) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.3) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = x, y = y)) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.3) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = x, colour = cluster, y = y)) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.3) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = VAF.B1, colour = sciClone.cluster, y = VAF.B2)) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.3) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = VAF.B1, colour = sciClone.cluster, y = VAF.B2)) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.3) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Spectral") +
guides(fill = guide_legend(title = "Cluster")) +
theme(legend.position="bottom")
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'MOBSTER.sciClone.cluster')
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
head(data$data)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
data$data$VAF.projected.B1 = data$data$VAF.projected.B1/100
data$data$VAF.projected.B2 = data$data$VAF.projected.B2/100
'
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'sciClone.cluster')
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
data$MOBSTER.fits$B1[[1]]
plot(data$MOBSTER.fits$B1[[1]])
x = plot(data$MOBSTER.fits$B1[[1]])
x
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
library(dbpmm)
library(dbpmm)
x = plot(data$MOBSTER.fits$B1[[1]])
x = plot(data$MOBSTER.fits$B1[[1]], silent = T)
x = plot(data$MOBSTER.fits$B1[[1]], silent = T)
x[[1]]
diag.plots = lapply(data$MOBSTER.fits, plot, silent = TRUE)
data$MOBSTER.fits
diag.plots = lapply(data$best.MOBSTER, plot, silent = TRUE)
diag.plots
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', s),
y = paste0('VAF.', w),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
bottom
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
bottom
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'sciClone.cluster')
top = append(top, list(pl))
}
}
}
top
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
data$data
data$data$MOBSTER.sciClone.cluster
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
load("~/Documents/GitHub/test.dbpmm/Multi-region Tests/ProofOfPrinciple/Input.RData")
data = input$data
head(data)
samples = c("B1", "B2")
# All input data
data = sciClone_input(data, CN = NULL, samples = samples)
# Apply straight away sciClone on the data
data = sciClone_fit(data, samples, minimumDepth = 30)
head(data$data)
# Control for tails
data = MOBSTER_sciClone_fit(data, samples, minimumDepth = 30)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
save(data, file = 'Sciclone.RData')
# Control for tails
data = MOBSTER_sciClone_fit(data, samples, minimumDepth = 30)
head(data$data)
x=data$data
View(x)
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'sciClone.cluster')
top = append(top, list(pl))
}
}
}
top
data$data
data$data$MOBSTER.sciClone.cluster
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = append(top, list(pl))
}
}
}
top
layout = matrix(0, ncol = length(samples), nrow = length(samples))
layout
diag(layout) = 1: length(samples)
layout
combs = length(samples) * (length(samples)-1) / 2
lower.tri(layout) = 1:combs
??lower.tri
lower.tri(layout)
combs
lower.tri(layout) = 1:combs
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
layout[lower.tri(layout)] = 1:combs
layout
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
layout
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
VAF.projected.B2
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
save(data, file = 'MOBSTER.Sciclone.RData')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
cluster
data$data[, cluster]
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
x = 'VAF.projected.B1'
y = 'VAF.projected.B2'
cluster = 'MOBSTER.sciClone.cluster'
ggplot(data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
# theme_minimal() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.6) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
eval(parse(text = cluster))
data$data$MOBSTER.sciClone.cluster
f = data$data
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
f$MOBSTER.sciClone.cluster = paste(f$MOBSTER.sciClone.cluster)
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
# my plot
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
quartz()
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
diag.plots = lapply(data$best.MOBSTER, plot, silent = TRUE)
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = append(top, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
dbpmm:::.multiplot(plotlist =
list(
diag.plots,
bottom,
top
),
layout = layout
)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
diag.plots = lapply(data$best.MOBSTER, function(w) plot(w, silent = TRUE)[[1]])
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = append(top, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
dbpmm:::.multiplot(plotlist =
list(
diag.plots,
bottom,
top
),
layout = layout
)
layout
list(
diag.plots,
bottom,
top
)
layout
dbpmm:::.multiplot(diag.plots,
bottom,
top,
layout = layout
)
dbpmm:::.multiplot(diag.plots,
bottom,
top,
ncol=4
layout = layout
)
dbpmm:::.multiplot(diag.plots,
bottom,
top,
ncol=4
)
diag.plots
dbpmm:::.multiplot(diag.plots, layout = layout)
dbpmm:::.multiplot(diag.plots, ncol = 2)
dbpmm:::.multiplot(plotlist = diag.plots, ncol = 2)
dbpmm:::.multiplot(plotlist = diag.plots, layout = layout)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
quartz*
quartz()
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
#  Diagonal
MB = data$best.MOBSTER
plots = lapply(
seq(MB),
function(w) plot(MB[[w]], silent = TRUE, main = paste("MOBSTER ", samples[w]) )[[1]])
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
plots = append(plots, list(pl))
}
}
}
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
plots = append(plots, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
# a unique plot with all the stuff, and the diagonal with tail detection
pdf("Example.pdf", width = 15, height = 15)
plot_grid(data, samples)
dev.off()
# a unique plot with all the stuff, and the diagonal with tail detection
pdf("Example.pdf", width = 10, height = 10)
plot_grid(data, samples)
dev.off()
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
devtools::document()
devtools::document()
library(dbpmm)
sprintf
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
