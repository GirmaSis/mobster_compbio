library(mobster)
library(mobster)
library(mobster)
load('~/a.RData')
x
plot(x)
# Prepare variables
domain = seq(0, 1, 0.01)
labels = names(.params_Pi(x))
pi = mobster:::.params_Pi(x)
pi
ICL = round(as.numeric(x$scores$ICL), 2)
NLL = round(as.numeric(x$scores$NLL), 2)
K = as.numeric(x$K)
# Load colors
colors = getColors_model(x, alpha = .9, palette = palette, tail.color = tail.color)
# Load colors
colors = mobster:::getColors_model(x, alpha = .9, palette = palette, tail.color = tail.color)
palette = 'Set1'
tail.color = 'darkgray'
# Load colors
colors = mobster:::getColors_model(x, alpha = .9, palette = palette, tail.color = tail.color)
colors
colors
# Main plotting data
x$data$cluster = factor(x$data$cluster, levels = names(colors))
x$data$cluster
# Text for the plot -- convergence
conv.steps = length(x$all.NLL)
conv.epsilon = 0
if(conv.steps >= 2) conv.epsilon = abs(rev(x$all.NLL)[1] - rev(x$all.NLL)[2])
conv.epsilon = formatC(conv.epsilon, format = "e", digits = 0)
conv.epsilon
# Text for the plot -- fit type
label.fit = ifelse(x$fit.type == 'MM', 'MM', "MLE")
label.fit = bquote(
.(label.fit) ~
':' ~ .(conv.steps) ~ 'steps,' ~ epsilon ~ '=' ~ .(conv.epsilon))
label.fit
# Text for the plot -- fit type
label.fit = ifelse(x$fit.type == 'MM', 'MM', "MLE")
label.fit = bquote(
.(label.fit) ~
'(' ~ .(conv.steps) ~ 'steps,' ~ epsilon ~ '=' ~ .(conv.epsilon) ~ ')')
label.fit
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
histogram.main = 'Fit'
cex = 1
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
annotation = NULL
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
alpha=1
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
dev.off()
dev.off()
dev.off()
hist_pl
#### Prepare plot for density values
densities = template_density(
x,
x.axis = domain,
binwidth = 0.01,
reduce = TRUE)
#### Prepare plot for density values
densities = mobster:::template_density(
x,
x.axis = domain,
binwidth = 0.01,
reduce = TRUE)
densities
# Add the trace and the mean of each component
hist_pl = hist_pl +
geom_line(data = densities, aes(y = y, x = x, color = cluster)) +
scale_color_manual(values = colors, labels = names(colors)) +
guides(color = FALSE)
hist_pl
Beta_peaks = x$Clusters %>%
dplyr::filter(type == 'Mean', cluster != 'Tail')
Beta_peaks
hist_pl = hist_pl +
geom_vline(data = Beta_peaks, aes(xintercept = fit.value, color = cluster), linetype = "longdash")
hist_pl
n = x
n$Clusters$fit.value = n$Clusters$init.value
initial.densities = template_density(
n,
x.axis = domain[2:(length(domain) - 1)], # Restricted for numerical errors
binwidth = 0.01,
reduce = TRUE)
den_init_pl = ggplot() +
labs(
title = bquote("Initialization"),
x = "", y = "") +
guides(fill = FALSE) +
ylim(0, max(initial.densities$y)) +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
den_init_pl = den_init_pl +
geom_line(data = initial.densities, aes(y = y, x = x, color = cluster)) +
scale_color_manual(values = colors, labels = names(colors)) +
guides(color = FALSE)
############### Plot 2 -- Mixing proportions
Proportions = x$Clusters %>%
dplyr::filter(type == 'Mixing proportion')
n$Clusters$fit.value = n$Clusters$init.value
initial.densities = mobster:::template_density(
n,
x.axis = domain[2:(length(domain) - 1)], # Restricted for numerical errors
binwidth = 0.01,
reduce = TRUE)
initial.densities
den_init_pl = ggplot() +
labs(
title = bquote("Initialization"),
x = "", y = "") +
guides(fill = FALSE) +
ylim(0, max(initial.densities$y)) +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
bg.color = 'ivory2'
den_init_pl = ggplot() +
labs(
title = bquote("Initialization"),
x = "", y = "") +
guides(fill = FALSE) +
ylim(0, max(initial.densities$y)) +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
den_init_pl
den_init_pl = den_init_pl +
geom_line(data = initial.densities, aes(y = y, x = x, color = cluster)) +
scale_color_manual(values = colors, labels = names(colors)) +
guides(color = FALSE)
den_init_pl
############### Plot 2 -- Mixing proportions
Proportions = x$Clusters %>%
dplyr::filter(type == 'Mixing proportion')
Proportions$fit.value = round(Proportions$fit.value, 2)
prop_hist_pl = ggplot(data = Proportions, aes(x = cluster, y = fit.value, fill = cluster)) +
geom_bar(stat = "identity", alpha = alpha, width = 0.3 * cex) +
scale_fill_manual(values = colors, labels = names(colors)) +
coord_flip() +
geom_hline(aes(yintercept = 0.02), colour = 'red', linetype = "longdash") +
labs(title  = bquote('Proportions')) +
xlab("") + ylab("") +
guides(fill = FALSE) +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ylim(c(0,1))
prop_hist_pl
Proportions
Proportions
Proportions$fit.value = round(Proportions$fit.value, 2)
Proportions
x$fit.tail
if(!x$fit.tail) Proportions = Proportions %>% filter(cluster != 'Tail')
Proportions
prop_hist_pl = ggplot(data = Proportions, aes(x = cluster, y = fit.value, fill = cluster)) +
geom_bar(stat = "identity", alpha = alpha, width = 0.3 * cex) +
scale_fill_manual(values = colors, labels = names(colors)) +
coord_flip() +
geom_hline(aes(yintercept = 0.02), colour = 'red', linetype = "longdash") +
labs(title  = bquote('Proportions')) +
xlab("") + ylab("") +
guides(fill = FALSE) +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ylim(c(0,1))
prop_hist_pl
###### Mean parameter (Beta)
Beta.a = x$Clusters %>%
dplyr::filter(cluster != 'Tail', type == 'a') %>%
dplyr::select(fit.value) %>%
dplyr::pull()
Beta.b = x$Clusters %>%
dplyr::filter(cluster != 'Tail', type == 'b') %>%
dplyr::select(fit.value) %>%
dplyr::pull()
df.pars = NULL
for(i in seq(labels.betas))
df.pars = rbind(
df.pars,
data.frame(Cluster = labels.betas[i],
Sample = rbeta(1000, Beta.a[i], Beta.b)))
###### Mean parameter (Pareto)
shape = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::pull(fit.value)
scale = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Scale') %>%
dplyr::pull(fit.value)
df.tail = NULL
labels.betas = .params_Beta(x)$cluster
labels.betas = mobster:::.params_Beta(x)$cluster
###### Mean parameter (Pareto)
shape = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::pull(fit.value)
scale = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Scale') %>%
dplyr::pull(fit.value)
df.tail = NULL
if(x$fit.tail)
{
df.tail = data.frame(Cluster = labels[1],
Sample = sads::rpareto(1000, shape = shape, scale = scale))
df.tail = df.tail[df.tail$Sample < 1, ]
}
###### Mean parameter (Beta)
Beta.a = x$Clusters %>%
dplyr::filter(cluster != 'Tail', type == 'a') %>%
dplyr::select(fit.value) %>%
dplyr::pull()
Beta.b = x$Clusters %>%
dplyr::filter(cluster != 'Tail', type == 'b') %>%
dplyr::select(fit.value) %>%
dplyr::pull()
df.pars = NULL
for(i in seq(labels.betas))
df.pars = rbind(
df.pars,
data.frame(Cluster = labels.betas[i],
Sample = rbeta(1000, Beta.a[i], Beta.b)))
###### Mean parameter (Pareto)
shape = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::pull(fit.value)
scale = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Scale') %>%
dplyr::pull(fit.value)
df.tail = NULL
if(x$fit.tail)
{
df.tail = data.frame(Cluster = labels[1],
Sample = sads::rpareto(1000, shape = shape, scale = scale))
df.tail = df.tail[df.tail$Sample < 1, ]
}
box_mean_pl = ggplot(data = rbind(df.tail, df.pars), aes(x = Cluster, y = Sample, fill = Cluster)) +
geom_violin(aes(color = NULL), alpha = alpha, trim = TRUE) +
geom_boxplot(width = .1, outlier.size = .5) +
scale_fill_manual(values = colors, labels = names(colors)) +
guides(fill=FALSE) +
labs(title  = bquote('Means')) +
xlab('') + ylab("") +
theme_light(base_size = 8 * cex) +
theme(
panel.background = element_rect(fill = alpha(bg.color, 0.4), colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
box_mean_pl
######################### Figure layout
figure = ggpubr::ggarrange(
hist_pl,
ggpubr::ggarrange(
den_init_pl, prop_hist_pl, box_mean_pl,
ncol = 3, nrow  = 1
),
nrow = 2,
ncol = 1,
heights = c(2,1)
)
library(mobster)
label.fit
label.fit = label.fit ~ ifelse(x$fit.tail, 'With tail', "Without tail")
label.fit
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
# Text for the plot -- fit type
label.fit = ifelse(x$fit.type == 'MM', 'MM', "MLE")
paste0(label.fit, ' (', conv.steps, 'steps; epsilon =', conv.epsilon, ')')
paste0(label.fit, ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')')
paste0(
ifelse(x$fit.tail, 'With tail', "Without tail"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')'
).
paste0(
ifelse(x$fit.tail, 'With tail', "Without tail"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')'
)
label.fit = paste0(
ifelse(x$fit.tail, 'With tail', "Without tail"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')'
)
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')'
)
label.fit = bquote(
.(label.fit) ~ .(conv.steps) ~ 'steps; ' ~ epsilon ~ '=' ~ .(conv.epsilon) ~ '|')
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ')'
)
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
x$status
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ') | ',
ifelse(x$status, 'CONVERGED', "NOT CONVERGED")
)
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
label.fit = as.expression(label.fit)
label.fit
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; epsilon = ', conv.epsilon, ') | ',
ifelse(x$status, 'CONVERGED', "NOT CONVERGED")
)
label.fit = expression(label.fit)
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; ', epsilon, ' = ', conv.epsilon, ') | ',
ifelse(x$status, 'CONVERGED', "NOT CONVERGED")
)
label.fit = paste0(
ifelse(x$fit.tail, 'Tail ON', "Tail OFF"), " | ",
ifelse(x$fit.type == 'MM', 'MM', "MLE"), ' (', conv.steps, ' steps; eps. = ', conv.epsilon, ') | ',
ifelse(x$status, 'CONVERGED', "NOT CONVERGED")
)
# Main ggplot object
hist_pl = ggplot(x$data, aes(VAF, fill = cluster, y = ..count../sum(..count..))) +
geom_histogram(alpha = alpha, position = 'identity', binwidth = 0.01) +
scale_fill_manual(values = colors, labels = names(colors)) +
labs(
title = bquote(bold(.(histogram.main))),
subtitle = annotation,
caption = label.fit,
x = "Observed Frequency", y = "Density") +
theme_classic(base_size = 10 * cex) +
geom_vline(xintercept = min(x$data$VAF), colour = 'black', linetype = "longdash") +
theme(
legend.position = "bottom",
legend.key.size = unit(.3 * cex, "cm"),
plot.caption = element_text(color = ifelse(x$status, "darkgreen",  "red"))
)
hist_pl
library(mobster)
