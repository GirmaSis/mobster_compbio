) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Trees consistent with the pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "(with pigeonhole principle)"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "(pigeonhole principle)"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = FALSE)
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = FALSE)
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
# axis.text.x=element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.1, "cm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
legend.title = "Algorithm",
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
title = "A",
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "left",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip()
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol=2))
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1, outlier.size = .5) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol=2))
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1, outlier.size = .5) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol=2, title = ''))
pretty(dat$y, n = 10)
pretty(res.table$trees, n = 10)
pretty(res.table$trees, n = 5)
pretty(res.table$trees, n = 10)
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1, outlier.size = .5) +
facet_wrap(~mode,  ncol = 1)  +
theme_light(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol = 2, title = '')) +
scale_y_continuous(breaks = pretty(res.table$trees, n = 10))
ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1, outlier.size = .5) +
facet_wrap(~mode,  ncol = 1)  +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol = 2, title = '')) +
scale_y_continuous(breaks = pretty(res.table$trees, n = 10))
pl = ggplot(res.table, aes(x = algo, y = trees, fill = algo)) +
geom_violin(alpha = .6, colour = NA) +
geom_boxplot(width = .1, outlier.size = .5) +
facet_wrap(~mode,  ncol = 1)  +
theme_classic(base_size = 10) +
scale_fill_brewer(palette = 'Set1') +
theme(
legend.position = "bottom",
legend.key.size = unit(.3, "cm"),
# legend.title = element_text("Algorithm"),
axis.text.y = element_blank()
) +
geom_hline(yintercept = 1, color = 'red', linetype = "longdash", size = .3) +
labs(
y = 'Number of trees',
x = "",
title = "Tree uncertainty",
subtitle = "Pigeonhole principle"
) +
coord_flip() +
guides(fill = guide_legend(ncol = 2, title = '')) +
scale_y_continuous(breaks = pretty(res.table$trees, n = 10))
ggsave(pl = '~/Documents/GitHub/test.dbpmm/Synthetic Tests/[dbpmm] Popgen_batch_1.1._comparison/num_trees.pdf')
ggsave(plot = pl, filename = '~/Documents/GitHub/test.dbpmm/Synthetic Tests/[dbpmm] Popgen_batch_1.1._comparison/num_trees.pdf')
library(mobster)
devtools::document()
devtools::document()
library(mobster)
??revolver_plt_rclusters
library(mobster)
x
SClusters
DP(obj, samples = c(x,y))
library(mobster)
library(mobster)
library(mobster)
mobster_fit_binomial
library(mobster)
devtools::document()
devtools::document()
library(mobster)
0.3/0.6
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
plot(text_grob("2D VAF plot", color = "black", hjust = 1, x = 1, face = "bold", size = 10))
??text_grob
plot(ggpubr::text_grob("2D VAF plot", color = "black", hjust = 1, x = 1, face = "bold", size = 10))
ggpubr::text_grob("2D VAF plot", color = "black", hjust = 1, x = 1, face = "bold", size = 10)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
plot.dbpmm
p = ggplot()
p
p = ggplot() +
theme_light()
p
p + theme(
p + theme(
panel.background = element_rect(fill = alpha("gainsboro", .5)))
p = ggplot() +
theme_classic()
p
p + theme(panel.background = element_rect(fill = alpha("gainsboro", .5)))
p + theme(panel.background = element_rect(fill = alpha("gainsboro", .5))) + theme(plot.background = element_rect(fill = 'red'))
p + theme(panel.background = element_rect(fill = alpha("gainsboro", 1))) + theme(plot.background = element_rect(fill = 'red'))
library(mobster)
library(mobster)
library(mobster)
load("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0/Full-data/Set07/Set07.RData_fit_MOBSTER.RData")
ls90
l()
ls()
fit
library(mobster)
fit
fit$data
DP(fit)
DP(fit, samples = 'Set_44')
DP(fit)
library(tidyr)
library(magrittr)
library(dplyr)
DP(fit)
DP(fit)  %>% spread(variable, value)
DP(fit)  %>% spread(variable, value) %>% filter(DP > 100)
DP(fit)
VAF(fit)
full_join(DP(fit), VAF(fit))
full_join(DP(fit), VAF(fit), by = 'id')
x = DP(fit)[1:3, ]
x
t(x)
x %>% spread(variable, value)
source('~/Documents/GitHub/mobster/R/mobster_dataset_getters.R', echo=TRUE)
x
x %>% spread(variable, value)
mobster:::print.mbst_data
fit$data
fit$data %>%
group_by(sample, variable)
fit$data %>%
group_by(sample, variable) %>%
filter(value > 0)
fit$data %>%
group_by(sample, variable) %>%
filter(value > 0) %>%
summarize(mean = mean(value), median = median(value), min = min(value), max = max(value)) %>%
arrange(variable)
