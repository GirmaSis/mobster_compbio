df = data.frame(cluster = names(x$pi))
x
print(
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type =='Mean' | type == 'Variance') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>%
spread(key = type, value = fit.value)
)
print(
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type =='Mean') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>%
spread(key = type, value = fit.value)
)
print(
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type =='Mean' | type == 'Variance') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>%
spread(key = type, value = fit.value)
)
df = x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type =='Mean' | type == 'Variance') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>%
spread(key = type, value = fit.value)
df
data.frame(df)
df.B = x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type =='Mean' | type == 'Variance') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>%
spread(key = type, value = fit.value)
df.B = data.frame(df.B)
df.B
rownames(df.B) = NULL
df.B
print(
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster == 'Tail', type =='Shape' | type == 'Scale') %>%
dplyr::mutate(fit.value = formatC(fit.value, format = "e", digits = 2)) %>%
spread(key = type, value = fit.value)
)
df.B
#
# clus.size = table(x$data$cluster)
# clus.size = clus.size[order(clus.size)]
# print(clus.size)
#
# ####################### Scores
# pio::pioTit("       Scores      ")
#
# print(tibble::as.tibble(x$scores))
#
Betas =
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster != 'Tail', type == 'Mean' | type == 'Variance' | type == 'Mixing proportion') %>%
dplyr::mutate(fit.value = formatC(fit.value, format = "e", digits = 2))
Betas
clus.size = table(x$data$cluster)
clus.size = clus.size[order(clus.size)]
clus.size
clus.size.pi = x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(type == 'Mixing proportion') %>%
dplyr::mutate(fit.value = formatC(fit.value, format = "e", digits = 2))
clus.size.pi
clus.size.pi = x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(type == 'Mixing proportion') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2))
clus.size.pi
print(clus.size)
print(
x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(cluster == 'Tail', type =='Shape' | type == 'Scale') %>%
dplyr::mutate(fit.value = formatC(fit.value, format = "e", digits = 2)) %>%
spread(key = type, value = fit.value)
)
df.B
cat(crayon::black(crayon::bgYellow("  Components (fit)  \n")))
df.B
x$fit.tail
cat(crayon::black(crayon::bgYellow("  Components (fit)  \n")))
cat(crayon::blurred('s'))
cat(crayon::bgBlue('s'))
cat('Tail', crayon::red('OFF'))
clus.size['Tail']
cat('Tail \tn =', clus.size['Tail'] )
clus.size.pi
clus.size
n.tail = ifelse('Tail' %in% names(clus.size), clus.size['Tail'], crayon::red('0'))
n.tail
x$Clusters
x$Clusters %>%
dplyr::filter(cluster == 'Tail', type = 'Shape')
shape.tail = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2))
shape.tail
shape.tail = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2))
shape.tail
shape.tail = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>% pull(fit.value)
shape.tail
cat('Tail \tn =', n.tail, '(', pi.tail  ,') \t Shape =', shape.tail )
pi.tail = clus.size.pi %>% filter(cluster == 'Tail') %>% pull(fit.value)
n.tail = ifelse('Tail' %in% names(clus.size), clus.size['Tail'], crayon::red('0'))
shape.tail = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>% pull(fit.value)
cat('Tail \tn =', n.tail, '(', pi.tail  ,') \t Shape =', shape.tail )
x$Clusters
x$Clusters %>% filter(cluster != 'Tail')
B.comp = x$Clusters %>% filter(cluster != 'Tail', type = 'Mean')
B.comp
B.comp = x$Clusters %>% filter(cluster != 'Tail', type == 'Mean')
B.comp
BP.comp = x$Clusters %>% filter(cluster != 'Tail', type == 'Mixing proportion')
BP.comp
B.comp = x$Clusters %>% filter(cluster != 'Tail', type == 'Mean' | type == 'Mixing proportion')
B.comp
B.comp = x$Clusters %>%
filter(cluster != 'Tail', type == 'Mean' | type == 'Mixing proportion') %>%
select(-init.value)
B.comp
B.comp = x$Clusters %>%
filter(cluster != 'Tail', type == 'Mean' | type == 'Mixing proportion') %>%
select(-init.value) %>%
spread(type, fit.value)
B.comp
for(i in 1:nrow(B.comp))
cat('Beta ', B.comp$cluster[i],
' \tn =', ifelse(B.comp$cluster[i] %in% names(clus.size), clus.size[B.comp$cluster[i]], crayon::red('0')),
'(', B.comp$`Mixing proportion`[i],') \t Peak (mean) =', B.comp$Mean[i] )
for(i in 1:nrow(B.comp))
cat('Beta ', B.comp$cluster[i],
' \tn =', ifelse(B.comp$cluster[i] %in% names(clus.size), clus.size[B.comp$cluster[i]], crayon::red('0')),
'(', B.comp$`Mixing proportion`[i],') \t Peak (mean) =', B.comp$Mean[i], '\n' )
B.comp$`Mixing proportion` = round(B.comp$`Mixing proportion`, 2)
for(i in 1:nrow(B.comp))
cat('Beta ', B.comp$cluster[i],
' \tn =', ifelse(B.comp$cluster[i] %in% names(clus.size), clus.size[B.comp$cluster[i]], crayon::red('0')),
'(', B.comp$`Mixing proportion`[i],') \t Peak (mean) =', B.comp$Mean[i], '\n' )
for (i in 1:nrow(B.comp))
cat(
paste0(
'Beta ',
B.comp$cluster[i],
' \tn =',
ifelse(
B.comp$cluster[i] %in% names(clus.size),
clus.size[B.comp$cluster[i]],
crayon::red('0')
),
'(',
B.comp$`Mixing proportion`[i],
') \t Peak (mean) =',
B.comp$Mean[i],
'\n'
)
)
cat(crayon::black(crayon::bgYellow("\n  Scores (model selection)  \n")))
print(x$scores, row.names = FALSE)
#'
#' @param x An obj of class \code{'dbpmm'}.
#' @param ...
#'
#' @return nothing.
#' @export
#' @import crayon
#'
#' @examples
#' TODO
print.dbpmm = function(x, ...)
{
stopifnot(inherits(x, "dbpmm"))
cat(
crayon::bgYellow(crayon::black("[ MOBSTER ]")),
'N =',
x$N,
crayon::cyan("points with"),
'K =',
x$Kbeta,
crayon::cyan("Beta clusters, fit by"),
crayon::yellow(x$fit.type),
crayon::cyan('in'),
length(x$all.NLL),
crayon::cyan("steps"),
ifelse(
x$status,
crayon::green('[CONVERGED]'),
crayon::red('[NON CONVERGED]')
),
"\n"
)
####################### Pi
clus.size = table(x$data$cluster)
clus.size = clus.size[order(clus.size)]
clus.size.pi = x$Clusters %>%
dplyr::select(-init.value) %>%
dplyr::filter(type == 'Mixing proportion') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2))
pi.tail = clus.size.pi %>% filter(cluster == 'Tail') %>% pull(fit.value)
n.tail = ifelse('Tail' %in% names(clus.size), clus.size['Tail'], crayon::red('0'))
shape.tail = x$Clusters %>%
dplyr::filter(cluster == 'Tail', type == 'Shape') %>%
dplyr::mutate(fit.value = formatC(fit.value, digits = 2)) %>% pull(fit.value)
cat(crayon::black(crayon::bgYellow("  Components (fit)  \n")))
if (!x$fit.tail)
cat('Tail', crayon::red('OFF'))
else
cat(paste0('Tail \tn =', n.tail, '(', pi.tail  , ') \t Shape =', shape.tail))
B.comp = x$Clusters %>%
filter(cluster != 'Tail', type == 'Mean' |
type == 'Mixing proportion') %>%
select(-init.value) %>%
spread(type, fit.value)
B.comp$`Mixing proportion` = round(B.comp$`Mixing proportion`, 2)
for (i in 1:nrow(B.comp))
cat(
paste0(
'Beta ',
B.comp$cluster[i],
' \tn =',
ifelse(
B.comp$cluster[i] %in% names(clus.size),
clus.size[B.comp$cluster[i]],
crayon::red('0')
),
'(',
B.comp$`Mixing proportion`[i],
') \t Peak (mean) =',
B.comp$Mean[i],
'\n'
)
)
####################### Scores
cat(crayon::black(crayon::bgYellow("\n  Scores (model selection)  \n")))
print(x$scores, row.names = FALSE)
}
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
print.dbpmm(x)
source('~/Documents/GitHub/mobster/R/S3_methods_print.R')
devtools::document()
devtools::document()
.params_Beta(x)
x
x$K
devtools::document()
devtools::document()
??MOBSTER
library(MOBSTER)
library(MOBSTER)
??MOBSTER
?mobster_fit
mobsterfit
data(mobsterfit)
devtools::document()
devtools::document()
evolutionary_parameters(x)
x
fit_example
evolutionary_parameters(fit_example)
devtools::document()
devtools::document()
library(MOBSTER)
??mobster_fit
devtools::document()
v = mobster_fit(fit_example$best$data, K = 2, samples = 1, trace = T)
v
v$best$trace
x=v$best
# Prepare trace
tr = split(x$trace, f = x$trace$step)
tr
density = 0.05
steps = seq(1, length(tr), round(density * length(tr)))
steps
template_density
# per point density
tr.points = lapply(steps, function(w, x) {
new.x = x
new.x$Clusters = tr[[w]]
points = template_density(
new.x,
x.axis = seq(0, 1, 0.01),
binwidth = 0.01,
reduce = TRUE
)
points$step = w
points
},
x = x)
tr.points = Reduce(rbind, tr.points)
tr.points
movie = tr.points
require(gganimate)
movie.render = ggplot(movie, aes(x, y, color = cluster)) +
# geom_histogram(data = x$data, aes(VAF, y = ..count../sum(..count..), color = cluster, fill = cluster), binwidth = 0.01) +
geom_histogram(
data = x$data,
aes(
VAF,
y = ..count.. / sum(..count..),
color = NULL,
fill = NULL
),
binwidth = 0.01
) +
geom_point() +
labs(title = "MOBSTER fit animation",
x = "Observed Frequency",
y = "Density") +
transition_states(step,
transition_length = 1,
state_length = 1) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
movie.render
require(plotly)
p <- tr.points %>%
plot_ly(
x = ~ x,
y = ~ y,
frame = ~ step,
color = ~ cluster,
type = 'scatter',
mode = 'markers',
showlegend = TRUE
)
p
data(fit_example)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
??MOBSTER
library(MOBSTER)
plot_model_selection(fit_example)
plot_model_selection(fit_example)
plot(fit_example$best)
data("fit_example")
library(MOBSTER)
plot(fit_example$best)
devtools::document()
library(MOBSTER)
plot(fit_example$best)
devtools::document()
library(MOBSTER)
fit_example
fit_example$best
plot(fit_example$best)
.libPaths()
remove.packages('mobster')
remove.packages('MOBSTER')
remove.packages('mobster')
remove.packages('dbpmm')
remove.packages('dbpmm')
library(MOBSTER)
library(MOBSTER)
plot(fit_example$best)
devtools::document()
devtools::document()
remove.packages('mobster')
remove.packages('MOBSTER')
library(mobster)
plot(fit_example$best)
plot_model_selection(fit_example)
plot_model_selection(fit_example)
library(mobster)
x=fit_example
library(mobster)
plot_model_selection(fit_example)
plot_model_selection(fit_example)
VIBER:::add_color_pl()
VIBER:::add_color_pl
VIBER::plot_2D
is.vector(NULL)
library(mobster)
plot(fit_example)
plot(fit_example$best)
plot(fit_example$best)
plot(fit_example$best, colors = c(`Tail`='gray'))
plot(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2`='blue'))
plot(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2`='steelblue'))
plot(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2`='steelblue'), alpha = .4)
library(mobster)
plot_mixing_proportions(fit_example$best)
plot_mixing_proportions(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2`='steelblue'))
plot_mixing_proportions
plot_mixing_proportions(fit_example$best, colors = c(`Tail`='gray', `C1`='red'))
x=fit_example$best
stopifnot(inherits(x, "dbpmm"))
Proportions = x$Clusters %>%
dplyr::filter(type == 'Mixing proportion')
library(tidyverse)
Proportions = x$Clusters %>%
dplyr::filter(type == 'Mixing proportion')
Proportions$fit.value = round(Proportions$fit.value, 2)
pl = ggplot(data = Proportions, aes(x = cluster, y = fit.value, fill = cluster)) +
geom_bar(stat = "identity", width = 0.3 * cex) +
geom_hline(
aes(yintercept = 0.02),
colour = 'red',
linetype = "longdash",
size = 0.3
) +
geom_text(
data = NULL,
aes(label = '2%', x = 0.1, y = 0.04),
inherit.aes = FALSE,
hjust = 0,
colour = 'red',
size = 2.5 * cex
) +
labs(title  = bquote(bold('Mixing Proportions'))) +
xlab("") +
ylab("") +
guides(fill = FALSE) +
theme_light(base_size = 8 * cex) +
ylim(c(0, 1))
cex=
2
pl = ggplot(data = Proportions, aes(x = cluster, y = fit.value, fill = cluster)) +
geom_bar(stat = "identity", width = 0.3 * cex) +
geom_hline(
aes(yintercept = 0.02),
colour = 'red',
linetype = "longdash",
size = 0.3
) +
geom_text(
data = NULL,
aes(label = '2%', x = 0.1, y = 0.04),
inherit.aes = FALSE,
hjust = 0,
colour = 'red',
size = 2.5 * cex
) +
labs(title  = bquote(bold('Mixing Proportions'))) +
xlab("") +
ylab("") +
guides(fill = FALSE) +
theme_light(base_size = 8 * cex) +
ylim(c(0, 1))
pl
add_fill_pl = function(x, pl, colors)
{
if(!is.vector(colors) | any(is.na(colors))) return(pl)
# clusters in x
wh_col = unique(x$x$cluster.Binomial)
stopifnot(all(wh_col %in% names(colors)))
pl + scale_color_manual(values = colors)
}
colors
colors = NA
add_fill_pl(x, pl, colors)
colors = c(`Tail` = 'black')
add_fill_pl(x, pl, colors)
is.vector(colors)
!is.vector(colors) | any(is.na(colors))
pl
x
colors
if(!is.vector(colors) | any(is.na(colors))) return(pl)
wh_col = unique(x$x$cluster.Binomial)
wh_col
x$data
wh_col = unique(x$data$cluster)
stopifnot(all(wh_col %in% names(colors)))
library(mobster)
plot_mixing_proportions(fit_example$best, colors = c(`Tail`='gray', `C1`='red'))
plot_mixing_proportions(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2` = 'orange'))
plot_mixing_proportions
add_fill_pl
mobster:::add_color_pl
plot_mixing_proportions(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2` = 'orange'))
plot(fit_example$best, colors = c(`Tail`='gray', `C1`='red', `C2` = 'orange'))
plot(fit_example$best, colors = c(`Tail`='gray', `C1`='darkred', `C2` = 'orange'))
library(mobster)
library(mobster)
data(fit_mvbmm_example)
