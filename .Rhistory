layout
combs = length(samples) * (length(samples)-1) / 2
lower.tri(layout) = 1:combs
??lower.tri
lower.tri(layout)
combs
lower.tri(layout) = 1:combs
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
layout[lower.tri(layout)] = 1:combs
layout
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
layout
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
VAF.projected.B2
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
save(data, file = 'MOBSTER.Sciclone.RData')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
cluster
data$data[, cluster]
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
x = 'VAF.projected.B1'
y = 'VAF.projected.B2'
cluster = 'MOBSTER.sciClone.cluster'
ggplot(data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
# theme_minimal() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")) +
# geom_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .5) +
geom_point(alpha = 0.6) +
labs(
title = paste(x, "vs", y),
subtitle = "",
x = x, y = y) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(data$data, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
eval(parse(text = cluster))
data$data$MOBSTER.sciClone.cluster
f = data$data
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
# scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
f$MOBSTER.sciClone.cluster = paste(f$MOBSTER.sciClone.cluster)
ggplot(f, aes(x = eval(parse(text = x)), colour = eval(parse(text = cluster)), y = eval(parse(text = y)))) +
geom_point(alpha = 0.6) +
xlim(0, 1) +
ylim(0, 1) +
scale_color_brewer(palette = "Set1") +
guides(colour = guide_legend(title = cluster)) +
theme(legend.position="bottom")
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# my plot
plot_2DVAF(data$data, x = 'VAF.projected.B1', y = 'VAF.projected.B2', cluster = 'MOBSTER.sciClone.cluster')
# my plot
plot_2DVAF(data$data, x = 'VAF.B1', y = 'VAF.B2', cluster = 'sciClone.cluster')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
quartz()
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
diag.plots = lapply(data$best.MOBSTER, plot, silent = TRUE)
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = append(top, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
dbpmm:::.multiplot(plotlist =
list(
diag.plots,
bottom,
top
),
layout = layout
)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
diag.plots = lapply(data$best.MOBSTER, function(w) plot(w, silent = TRUE)[[1]])
bottom = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
bottom = append(bottom, list(pl))
}
}
}
top = NULL
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
top = append(top, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
layout[upper.tri(layout)] = (1:combs) + length(samples) + combs
dbpmm:::.multiplot(plotlist =
list(
diag.plots,
bottom,
top
),
layout = layout
)
layout
list(
diag.plots,
bottom,
top
)
layout
dbpmm:::.multiplot(diag.plots,
bottom,
top,
layout = layout
)
dbpmm:::.multiplot(diag.plots,
bottom,
top,
ncol=4
layout = layout
)
dbpmm:::.multiplot(diag.plots,
bottom,
top,
ncol=4
)
diag.plots
dbpmm:::.multiplot(diag.plots, layout = layout)
dbpmm:::.multiplot(diag.plots, ncol = 2)
dbpmm:::.multiplot(plotlist = diag.plots, ncol = 2)
dbpmm:::.multiplot(plotlist = diag.plots, layout = layout)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
quartz*
quartz()
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
#  Diagonal
MB = data$best.MOBSTER
plots = lapply(
seq(MB),
function(w) plot(MB[[w]], silent = TRUE, main = paste("MOBSTER ", samples[w]) )[[1]])
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.', samples[s]),
y = paste0('VAF.', samples[w]),
cluster = 'sciClone.cluster')
plots = append(plots, list(pl))
}
}
}
for(s in seq(samples)) {
for(w in s:length(samples)) {
if(s != w) {
pl = plot_2DVAF(
data$data,
x = paste0('VAF.projected.', samples[s]),
y = paste0('VAF.projected.', samples[w]),
cluster = 'MOBSTER.sciClone.cluster')
plots = append(plots, list(pl))
}
}
}
layout = matrix(0, ncol = length(samples), nrow = length(samples))
diag(layout) = 1:length(samples)
combs = length(samples) * (length(samples)-1) / 2
layout[lower.tri(layout)] = (1:combs) + length(samples)
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
# a unique plot with all the stuff, and the diagonal with tail detection
plot_grid(data, samples)
# a unique plot with all the stuff, and the diagonal with tail detection
pdf("Example.pdf", width = 15, height = 15)
plot_grid(data, samples)
dev.off()
# a unique plot with all the stuff, and the diagonal with tail detection
pdf("Example.pdf", width = 10, height = 10)
plot_grid(data, samples)
dev.off()
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
source('~/Documents/GitHub/dbpmm/R/multivariate.R')
devtools::document()
devtools::document()
library(dbpmm)
sprintf
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
load("~/Documents/GitHub/test.dbpmm/Multi-region Tests/MSeq2.0/Diploid_all.RData")
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
diploid
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
plot_2DVAF
diploid
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_42', cluster = NULL)
library(dbpmm)
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_42', cluster = NULL)
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
plot_2DVAF(diploid, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
??sciClone
View(diploid)
head(diploid)
head(diploid)
samples = paste0('Set6_', c(42, 44, 45, 47, 48))
cols = c(
paste0('NV.', samples),
paste0('DP.', samples),
paste0('VAF.', samples)
)
cols.VAF = paste0('VAF.', samples)
diploid = diploid[, cols]
head(diploid)
CUTOFF = 0.05
x = diploid[2, ]
x
x = diploid[2, cols.VAF]
x
xg0 = x > 0
xg0
xgc = x > CUTOFF
xgc
xgc[xg0]
all(xgc[xg0])
to.Remove = apply(
diploid[, cols.VAF], 1,
function(x) {
xg0 = x > 0
xgc = x >= CUTOFF
all(xgc[xg0])
}
)
suitable = apply(
diploid[, cols.VAF], 1,
function(x) {
xg0 = x > 0
xgc = x >= CUTOFF
all(xgc[xg0])
}
)
subset = diploid[suitable, ]
subset
plot_2DVAF(subset, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
plot_2DVAF(subset, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
plot_2DVAF(subset, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
plot_2DVAF(subset, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
View(subset)
xg0
all(!xg0)
all(xgc[xg0])
suitable = apply(
diploid[, cols.VAF], 1,
function(x) {
xg0 = x > 0
xgc = x >= CUTOFF
if (all(!xg0)) return(FALSE)
else return(all(xgc[xg0]))
}
)
subset = diploid[suitable, ]
x =   diploid[712, cols.VAF]
x
devtools::document()
devtools::document()
library(dbpmm)
library(dbpmm)
library(dbpmm)
devtools::dcoum
devtools::document()
library(dbpmm)
plot_2DVAF(subset, x = 'VAF.Set6_42', y = 'VAF.Set6_48', cluster = NULL)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
project_VAF_belowValue_each_sample = function(x, VAF.columns, NV.columns, VAF.lower = 0.05)
{
# Subset the data and keep only SNVs that are either not-called in a sample or that, if
# called, they have VAF above cutoff
suitable = apply(
x[, VAF.columns], 1,
function(y) {
xg0 = y > 0
xgc = y >= VAF.lower
if (all(!xg0)) return(FALSE)
else return(all(xgc[xg0]))
}
)
rejected = x[!suitable, ]
accepted = x[suitable, ]
# In each entry that is unsutable, we fix it projecting to 0 entries below the cutoff
# but we keep the coverage information available
new.VAF = rejected[, VAF.columns]
idx = apply(new.VAF, c(1,2), function(w) w < VAF.lower)
new.VAF[idx] = 0
new.NV = rejected[, NV.columns]
new.NV[idx] = 0
new.entries = cbind(new.VAF, new.NV)
new.entries = cbind(new.entries, rejected[, DP.columns])
new.x = rbind(accepted, new.entries[, colnames(accepted)])
pio::pioTit(paste0("SNVs that when called are in the VAF above ", VAF.lower, " - n = ", nrow(new.x)))
print(tibble::as.tibble(new.x))
list(data = new.x, rejected = rejected)
}
# Subset the data and keep only SNVs that are either not-called in a sample or that, if
# called, they have VAF above cutoff
suitable = sapply(
seq(VAF.columns),
function(y) {
v = x[, VAF.columns[y]]
xg0 = v > 0
xgc = v >= VAF.lower[y]
if (all(!xg0)) return(FALSE)
else return(all(xgc[xg0]))
}
)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
x_nk = matrix(runif(100))
z_nk = matrix(runif(100))
z_nk
z_nk = matrix(runif(100), ncol = 3)
z_nk = matrix(runif(333), ncol = 3)
z_nk
x = -sum(z_nk * log(z_nk), na.rm = TRUE)
x
z_nk * log(z_nk)
zznk = cbind(z_nk,  0)
zznk
x = -sum(z_nk * log(z_nk), na.rm = TRUE)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
zz_nk = cbind(z_nk,  0)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
y
x
zz_nk * log(zz_nk)
zz_nk = cbind(z_nk,  -0.00000001)
y = -sum(zz_nk * log(zz_nk), na.rm = TRUE)
y
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
devtools::document()
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
prod(c(1,2,2), c(3,2,2))
prod(c(2,2), c(2,2))
sessionInfo()
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
pio::pioHdr("MOBSTER", "Plotting grid with")
pio::pioHdr("MOBSTER ss", "Plotting grid with")
pio::pioHdr("MOBSTER Grid plot for multivariate", "Plotting grid with")
pio::pioHdr
pio::pioHdr("MOBSTER - Multivariate grid plot",
c(`Bottom block` = below.cluster,
`Top block` = top.cluster,
`Diagonal` = diagonal
)
)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
library(dbpmm)
