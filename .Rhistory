plot.fit.summ ary
.plot.fit.summary
best = plot.dbpmm(
res$best,
cex = 1 * cex,
title = "",
histogram.main = title,
# palette = palette,
silent = TRUE,
annotation = paste0('Top-fit; N = ', nrow(res$best$data), ' mutations.')
)
res
x
library(ggrepel)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
trans_format
scales::trans_format
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
devtools::document()
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
ggplot2::guides_legend
guides_legend
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
3+4
library(mobster)
library(fishplot)
#provide a list of timepoints to plot
#You may need to add interpolated points to end up with the desired
#visualization. Example here was actually sampled at days 0 and 150
timepoints=c(0,30,75,150)
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 45, 00, 00,
02, 00, 00, 00,
02, 00, 02, 01,
98, 00, 95, 40),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1,1,3)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 45, 00, 00,
02, 00, 00, 00),
ncol=length(timepoints))
frac.table
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1,1,3)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
frac.table
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 45,
02, 00,
02, 00,
98, 00),
ncol=length(timepoints))
frac.table
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1,1,3)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
frac.table
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 100,
20, 10),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
timepoints
#provide a list of timepoints to plot
#You may need to add interpolated points to end up with the desired
#visualization. Example here was actually sampled at days 0 and 150
timepoints=c(0,100)
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 100,
20, 10),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 100,
100, 10),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 100,
90, 10),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
library(fishplot)
#provide a list of timepoints to plot
#You may need to add interpolated points to end up with the desired
#visualization. Example here was actually sampled at days 0 and 150
timepoints=c(0,100)
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100, 100,
90, 10),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
library(fishplot)
#provide a list of timepoints to plot
#You may need to add interpolated points to end up with the desired
#visualization. Example here was actually sampled at days 0 and 150
timepoints=c(0)
#provide a matrix with the fraction of each population
#present at each timepoint
frac.table = matrix(
c(100,
90),
ncol=length(timepoints))
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
#provide a matrix with the fraction of each population
#present at each timepoint
CCF = c(100, 80, 35, 34)
frac.table = matrix(CCF)
frac.table
matrix(c(CCF, CCF))
matrix(c(CCF, CCF), ncol = 2)
frac.table = matrix(c(CCF, CCF), ncol = 2)
library(fishplot)
#provide a list of timepoints to plot
#You may need to add interpolated points to end up with the desired
#visualization. Example here was actually sampled at days 0 and 150
timepoints=c(0, 100)
#provide a matrix with the fraction of each population
#present at each timepoint
CCF = c(100, 80, 35, 34)
frac.table = matrix(c(CCF, CCF), ncol = 2)
#provide a vector listing each clone's parent
#(0 indicates no parent)
parents = c(0,1, 2, 2)
#create a fish object
fish = createFishObject(frac.table,parents,timepoints=timepoints)
#calculate the layout of the drawing
fish = layoutClones(fish)
#draw the plot, using the splining method (recommended)
#and providing both timepoints to label and a plot title
fishPlot(fish,shape="spline",title.btm="Sample1",
cex.title=0.5, vlines=c(0,150),
vlab=c("day 0","day 150"))
3+4
devtools::document()
devtools::document()
library(mobster)
library(pheatmap)
library(mobster)
devtools::document()
devtools::document()
library(mobster)
devtools::document()
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
library(mobster)
devtools::document()
library(mobster)
paste0(
sample(LETTERS, 8), "bootstrap_computation.RDS")
paste0(
sample(LETTERS, 8),
"_bootstrap_computation.RDS", collapse = '')
paste0(
sample(LETTERS, 8),
"_bootstrap_computation.RDS", collapse = '', sep = '')
paste0(
paste0(sample(LETTERS, 8), collapse = ''),
"_bootstrap_computation.RDS")
library(mobster)
3+4
function(w) {
mobster_fit(x = w,
parallel = FALSE,
seed = NULL,
...)$best
}
devtools::document()
library(mobster)
resamples
library(mobster)
library(mobster)
library(mobster)
boot.values = bootstrapped_statistics(fit = fit, bootstrap.fits = bootstrap.fits, alpha = alpha)
bootstrapped_statistics = function(fit, bootstrap.fits, alpha = 0.025)
{
n = length(bootstrap.fits)
pio::pioTit(paste("Bootstrap observations n =", n))
res = NULL
# Overall statistic: "model frequency"
models.tab = lapply(seq(bootstrap.fits),
function(w)
data.frame(
`resample` = w,
`tail` = bootstrap.fits[[w]]$fit.tail,
`K` =  bootstrap.fits[[w]]$Kbeta,
`Model` = paste0(
'K = ',
bootstrap.fits[[w]]$Kbeta,
ifelse(bootstrap.fits[[w]]$fit.tail,
" with tail",
" without tail")
),
stringsAsFactors = FALSE
))
models.tab = Reduce(rbind, models.tab)
model.frequency = tibble::as_tibble(
sort(table(models.tab$Model)/n, decreasing = TRUE)
)
colnames(model.frequency) = c("Model", "Frequency")
this.model = paste0(
'K = ',
fit$Kbeta,
ifelse(fit$fit.tail,
" with tail",
" without tail")
)
model.frequency$fit.model = FALSE
model.frequency$fit.model[model.frequency$Model == this.model] = TRUE
# Parameter statistics : alpha-level empirical CIs for the bootstrap distribution
bootstrap.values = lapply(seq(bootstrap.fits),
function(w)
cbind(bootstrap.fits[[w]]$Clusters, `resample` = w))
bootstrap.values = tibble::as_tibble(Reduce(rbind, bootstrap.values)) %>%
rename(statistics = type)
# Stats table
fit$Clusters = fit$Clusters %>% rename(statistics = type)
stats = bootstrap.values %>%
group_by(cluster, statistics) %>%
summarise(
min = min(fit.value),
lower_quantile = quantile(fit.value, alpha),
higher_quantile = quantile(fit.value, 1-alpha),
max = max(fit.value)
) %>%
left_join(fit$Clusters, by = c('cluster', 'statistics'))
pio::pioTit("Bootstrapped model frequency")
pio::pioDisp(model.frequency)
pio::pioTit("CI (empirical quantiles from bootstrap replicates)")
pio::pioStr("\nMixing proportions", "\n")
print(stats %>%
filter(statistics == 'Mixing proportion'))
pio::pioStr("\nTail shape/ scale", "\n")
print(stats %>%
filter(cluster == 'Tail' & statistics %in% c('Shape', 'Scale')))
pio::pioStr("\nBeta peaks", "\n")
print(stats %>%
filter(statistics %in% c('Mean', 'Variance') & cluster != 'Tail'))
ret = list(bootstrap.values = bootstrap.values,
models.tab = models.tab,
stats = stats
)
invisible(ret)
}
bootstrapped_statistics = function(fit, bootstrap.fits, alpha = 0.025)
{
n = length(bootstrap.fits)
pio::pioTit(paste("Bootstrap observations n =", n))
res = NULL
# Overall statistic: "model frequency"
models.tab = lapply(seq(bootstrap.fits),
function(w)
data.frame(
`resample` = w,
`tail` = bootstrap.fits[[w]]$fit.tail,
`K` =  bootstrap.fits[[w]]$Kbeta,
`Model` = paste0(
'K = ',
bootstrap.fits[[w]]$Kbeta,
ifelse(bootstrap.fits[[w]]$fit.tail,
" with tail",
" without tail")
),
stringsAsFactors = FALSE
))
models.tab = Reduce(rbind, models.tab)
model.frequency = tibble::as_tibble(
sort(table(models.tab$Model)/n, decreasing = TRUE)
)
colnames(model.frequency) = c("Model", "Frequency")
this.model = paste0(
'K = ',
fit$Kbeta,
ifelse(fit$fit.tail,
" with tail",
" without tail")
)
model.frequency$fit.model = FALSE
model.frequency$fit.model[model.frequency$Model == this.model] = TRUE
# Parameter statistics : alpha-level empirical CIs for the bootstrap distribution
bootstrap.values = lapply(seq(bootstrap.fits),
function(w)
cbind(bootstrap.fits[[w]]$Clusters, `resample` = w))
bootstrap.values = tibble::as_tibble(Reduce(rbind, bootstrap.values)) %>%
rename(statistics = type)
# Stats table
fit$Clusters = fit$Clusters %>% rename(statistics = type)
stats = bootstrap.values %>%
group_by(cluster, statistics) %>%
summarise(
min = min(fit.value),
lower_quantile = quantile(fit.value, alpha),
higher_quantile = quantile(fit.value, 1-alpha),
max = max(fit.value)
) %>%
left_join(fit$Clusters, by = c('cluster', 'statistics'))
pio::pioTit("Bootstrapped model frequency")
pio::pioDisp(model.frequency)
pio::pioTit("CI (empirical quantiles from bootstrap replicates)")
pio::pioStr("\nMixing proportions", "\n")
print(stats %>%
filter(statistics == 'Mixing proportion'))
pio::pioStr("\nTail shape/ scale", "\n")
print(stats %>%
filter(cluster == 'Tail' & statistics %in% c('Shape', 'Scale')))
pio::pioStr("\nBeta peaks", "\n")
print(stats %>%
filter(statistics %in% c('Mean', 'Variance') & cluster != 'Tail'))
ret = list(bootstrap.values = bootstrap.values,
models.tab = models.tab,
stats = stats
)
invisible(ret)
}
3+4
x = runif(10)
x
lm(~x)
x = data.frame(runif(10))
x
lm(~x)
x = data.frame(y = runif(10))
lm(~y)
lm(~y, data = x)
x = data.frame(x=1:10, y = runif(10))
lm(x~y, data = x)
plot(m)
x = data.frame(x=1:10, y = runif(10))
m = lm(x~y, data = x)
plot(m)
plot(x$x, x$y)
plot(m)
m
x = data.frame(x=1:10, y = runif(10, .5, .6))
plot(x$x, x$y)
m = lm(x~y, data = x)
plot(m)
summary(m)
ggplot(x, aes(x,y)) +
geom_point()
library(ggplot2)
ggplot(x, aes(x,y)) +
geom_point()
ggplot(x, aes(x,y)) +
geom_point() +
geom_smooth()
ggplot(x, aes(x,y)) +
geom_point() +
geom_smooth(method = 'lm')
m = lm(x~y, data = x)
summary(m)
x = data.frame(x=1:10, y = runif(10, .5, .6))
ggplot(x, aes(x,y)) +
geom_point() +
geom_smooth(method = 'lm')
#
x = data.frame(x=1:10, y = runif(10, .5, .6))
x
#
x = data.frame(x=1:10, y = runif(10, 0, .6))
ggplot(x, aes(x,y)) +
geom_point() +
geom_smooth(method = 'lm')
m = lm(x~y, data = x)
# plot(m)
summary(m)
#
x = data.frame(x=1:10, y = rbeta(10, 10, 10))
ggplot(x, aes(x,y)) +
geom_point() +
geom_smooth(method = 'lm')
#
x = rbeta(10, 10, 10)
x
hist(x, breaks = seq(0, 1, 0.02))
x
library(MASS)
f = fitdistr(x, 'beta')
f = fitdistr(x, 'beta', start = list(shape1=1, shape2=1))
f
f = fitdistr(runif(10, .5, .6), 'beta', start = list(shape1=1, shape2=1))
runif(10, .5, .6)
f = fitdistr(runif(10), 'beta', start = list(shape1=1, shape2=1))
f
load("~/Downloads/cohort.RData")
load("~/Downloads/cohort.RData")
library(revolver)
cohort
revolver_compute_CLtrees(cohort, patient = 'TCGA-OR-A5L8')
revolver_compute_phylogenies(cohort, patient = 'TCGA-OR-A5L8')
revolver_compute_phylogenies
revolver_compute_phylogenies(cohort, patient = 'TCGA-OR-A5L8')
